[{"path":"https://corella.ala.org.au/articles/checking-your-dataset.html","id":"checking-individual-terms","dir":"Articles","previous_headings":"","what":"Checking individual terms","title":"Checking your dataset","text":"corella consists many internal check_ functions. one runs basic validation checks specified column ensure data conforms Darwin Core term’s expected data type. example, small dataset two observations galahs (Eolophus roseicapilla) (class character), latitude longitude coordinates (class numeric), location description column place (class character). can use function set_coordinates() specify columns refer valid Darwin Core terms decimalLatitude decimalLongitude. intentionally added wrong column place decimalLatitude. corella return error decimalLatitude decimalLatitude fields must numeric Darwin Core standard. error comes small internal checking function called check_decimalLatitude().","code":"library(corella) library(tibble)  df <- tibble::tibble(   name = c(\"Eolophus roseicapilla\", \"Eolophus roseicapilla\"),   latitude = c(-35.310, -35.273),   longitude = c(149.125, 149.133),   place = c(\"a big tree\", \"an open field\") )  df #> # A tibble: 2 × 4 #>   name                  latitude longitude place         #>   <chr>                    <dbl>     <dbl> <chr>         #> 1 Eolophus roseicapilla    -35.3      149. a big tree    #> 2 Eolophus roseicapilla    -35.3      149. an open field df |>   set_coordinates(decimalLatitude = place, # wrong column                   decimalLongitude = longitude) #> ⠙ Checking 2 columns: decimalLatitude and decimalLongitude #> ✔ Checking 2 columns: decimalLatitude and decimalLongitude [646ms] #>  #> Error in `check_decimalLatitude()`: #> ! decimalLatitude must be a numeric vector, not character."},{"path":"https://corella.ala.org.au/articles/checking-your-dataset.html","id":"supported-terms","dir":"Articles","previous_headings":"Checking individual terms","what":"Supported terms","title":"Checking your dataset","text":"corella contains internal check_ functions individual Darwin Core terms supported. follows:  user specifies column matching Darwin Core term (column/term detected corella automatically) set_ function, set_ function triggers matching term’s check_ function. process ensures data correctly formatted prior saved Darwin Core Archive. ’s useful know internal, individual check_ functions exist building blocks full suite checks, users can run check_dataset().","code":""},{"path":"https://corella.ala.org.au/articles/checking-your-dataset.html","id":"checking-a-full-dataset","dir":"Articles","previous_headings":"","what":"Checking a full dataset","title":"Checking your dataset","text":"users familiar Darwin Core standards, datasets already conform Darwin Core standards (close), might convenient run many checks one time. Users can use check_dataset() function run “test suite” dataset. check_dataset() detects columns match valid Darwin Core terms, runs matching check_ functions , interactively, much like devtools::test() devtools::check(). output check_dataset() returns: * summary table whether matching column’s check passed failed * number errors passed columns * Whether data meets minimum Darwin Core requirements * first 5 error messages returned checks Note check_dataset() currently accepts occurrence-level datasets. Datasets hierarchical events data (eg multiple repeated Surveys, Site Locations) currently supported.","code":"df <- tibble::tibble(   decimalLatitude = c(-35.310, \"-35.273\"), # deliberate error for demonstration purposes   decimalLongitude = c(149.125, 149.133),   date = c(\"14-01-2023\", \"15-01-2023\"),   individualCount = c(0, 2),   scientificName = c(\"Callocephalon fimbriatum\", \"Eolophus roseicapilla\"),   country = c(\"AU\", \"AU\"),   occurrenceStatus = c(\"present\", \"present\")   )  df |>   check_dataset() #> ℹ Testing data #> ✔ | E P | Column #> ⠙ | 0  decimalLatitude #> ✔ | 3 ✖ | decimalLatitude   [50ms] #>  #> ⠙ | 0  decimalLongitude #> ✔ | 0 ✔ | decimalLongitude  [9ms] #>  #> ⠙ | 0  individualCount #> ✔ | 1 ✖ | individualCount   [29ms] #>  #> ⠙ | 0  scientificName #> ✔ | 0 ✔ | scientificName    [9ms] #>  #> ⠙ | 0  country #> ✔ | 1 ✖ | country           [28ms] #>  #> ══ Results ═════════════════════════════════════════════════════════════════════ #>  #> [ Errors: 5 | Pass: 2 ] #> ℹ Checking Darwin Core compliance #> ✖ Data does not meet minimum Darwin Core column requirements #> ℹ Use `suggest_workflow()` to see more information. #> ── Error in term ─────────────────────────────────────────────────────────────── #>  #> decimalLatitude must be a numeric vector, not character. #> decimalLatitude must be a numeric vector, not character. #> Value is outside of expected range in decimalLatitude. #> ℹ Column contains values outside of -90 <= x <= 90. #> individualCount values do not match occurrenceStatus. #> ✖ Found 1 row where individualCount = 0 but occurrenceStatus = \"present\". #> Unexpected value in country. #> ✖ Invalid value: \"AU\""},{"path":"https://corella.ala.org.au/articles/checking-your-dataset.html","id":"users-have-options","dir":"Articles","previous_headings":"","what":"Users have options","title":"Checking your dataset","text":"corella offers two options checking dataset, detailed : Running individual checks set_ functions, running “test suite” check_dataset(). hope alternative options provide users different options workflow, allowing choose favourite method switch methods standardise data.","code":""},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"Quick start guide","text":"install CRAN: install development version GitHub: load package:","code":"install.packages(\"corella\") # install.packages(\"devtools\") devtools::install_github(\"AtlasOfLivingAustralia/corella\") library(corella)"},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"rename-add-or-edit-columns","dir":"Articles","previous_headings":"","what":"Rename, add or edit columns","title":"Quick start guide","text":"minimal example dataset cockatoo observations. dataframe df columns contain information like standardise using Darwin Core. can standardise data set_ functions. set_ functions possess suffix name identify type data used standardise (e.g. set_coordinates, set_datetime), arguments set_ functions valid Darwin Core terms (ie column names). grouping Darwin Core terms based data type, corella makes easier users find relevant Darwin Core terms use column names (one onerous parts Darwin Core new users). Let’s specify scientific name (.e. genus + species name) data species column using set_scientific_name(). ’ll notice 2 things happen: species column dataframe renamed scientificName set_scientific_name() runs check species column make sure formatted correctly happens add column error ? latitude column df class character column, instead numeric column . try update column name using set_coordinates(), error tells us class wrong.","code":"library(tibble) library(lubridate)  df <- tibble(   latitude = c(-35.310, \"-35.273\"), # deliberate error for demonstration purposes   longitude = c(149.125, 149.133),   date = c(\"14-01-2023\", \"15-01-2023\"),   time = c(\"10:23:00\", \"11:25:00\"),   month = c(\"January\", \"February\"),   day = c(100, 101),   species = c(\"Callocephalon fimbriatum\", \"Eolophus roseicapilla\"),   n = c(2, 3),   crs = c(\"WGS84\", \"WGS8d\"),   country = c(\"Australia\", \"Denmark\"),   continent = c(\"Oceania\", \"Europe\")   )  df #> # A tibble: 2 × 11 #>   latitude longitude date       time     month   day species     n crs   country #>   <chr>        <dbl> <chr>      <chr>    <chr> <dbl> <chr>   <dbl> <chr> <chr>   #> 1 -35.31        149. 14-01-2023 10:23:00 Janu…   100 Calloc…     2 WGS84 Austra… #> 2 -35.273       149. 15-01-2023 11:25:00 Febr…   101 Eoloph…     3 WGS8d Denmark #> # ℹ 1 more variable: continent <chr> df |>   set_scientific_name(scientificName = species) #> ⠙ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [337ms] #>  #> # A tibble: 2 × 11 #>   latitude longitude date       time   month   day     n crs   country continent #>   <chr>        <dbl> <chr>      <chr>  <chr> <dbl> <dbl> <chr> <chr>   <chr>     #> 1 -35.31        149. 14-01-2023 10:23… Janu…   100     2 WGS84 Austra… Oceania   #> 2 -35.273       149. 15-01-2023 11:25… Febr…   101     3 WGS8d Denmark Europe    #> # ℹ 1 more variable: scientificName <chr> df |>   set_scientific_name(scientificName = species) |>   set_coordinates(decimalLongitude = longitude,                   decimalLatitude = latitude) #> ⠙ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [316ms] #>  #> ⠙ Checking 2 columns: decimalLatitude and decimalLongitude #> ✔ Checking 2 columns: decimalLatitude and decimalLongitude [620ms] #>  #> Error in `check_decimalLatitude()`: #> ! decimalLatitude must be a numeric vector, not character."},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"fix-or-update-columns","dir":"Articles","previous_headings":"Rename, add or edit columns","what":"Fix or update columns","title":"Quick start guide","text":"change, edit fix column, users can edit column within set_ function. set_ function essentially specialised dplyr::mutate(), meaning users can edit columns using processes using dplyr::mutate(). can fix latitude column class numeric within set_coordinates() function.","code":"df_darwincore <- df |>   set_scientific_name(scientificName = species) |>   set_coordinates(decimalLongitude = longitude,                   decimalLatitude = as.numeric(latitude)) #> ⠙ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [311ms] #>  #> ⠙ Checking 2 columns: decimalLatitude and decimalLongitude #> ✔ Checking 2 columns: decimalLatitude and decimalLongitude [621ms] #>   df_darwincore #> # A tibble: 2 × 11 #>   date       time     month     day     n crs   country continent scientificName #>   <chr>      <chr>    <chr>   <dbl> <dbl> <chr> <chr>   <chr>     <chr>          #> 1 14-01-2023 10:23:00 January   100     2 WGS84 Austra… Oceania   Callocephalon… #> 2 15-01-2023 11:25:00 Februa…   101     3 WGS8d Denmark Europe    Eolophus rose… #> # ℹ 2 more variables: decimalLatitude <dbl>, decimalLongitude <dbl>"},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"auto-detect-columns","dir":"Articles","previous_headings":"Rename, add or edit columns","what":"Auto-detect columns","title":"Quick start guide","text":"corella also able detect column exists data frame already valid Darwin Core term column name. example, df contains columns locality information. can add set_locality() pipe identify columns, several columns already valid Darwin Core terms column names (country continent), set_locality() detect valid Darwin Core columns df check automatically. corella’s auto-detection prevents users needing specify every single column, reducing amount typing users already valid Darwin Core column names!","code":"df |>   set_scientific_name(scientificName = species) |>   set_coordinates(decimalLongitude = longitude,                   decimalLatitude = as.numeric(latitude)) |>   set_locality() #> ⠙ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [311ms] #>  #> ⠙ Checking 2 columns: decimalLatitude and decimalLongitude #> ✔ Checking 2 columns: decimalLatitude and decimalLongitude [617ms] #>  #> ⠙ Checking 2 columns: country and continent #> ✔ Checking 2 columns: country and continent [617ms] #>  #> # A tibble: 2 × 11 #>   date       time     month     day     n crs   country continent scientificName #>   <chr>      <chr>    <chr>   <dbl> <dbl> <chr> <chr>   <chr>     <chr>          #> 1 14-01-2023 10:23:00 January   100     2 WGS84 Austra… Oceania   Callocephalon… #> 2 15-01-2023 11:25:00 Februa…   101     3 WGS8d Denmark Europe    Eolophus rose… #> # ℹ 2 more variables: decimalLatitude <dbl>, decimalLongitude <dbl>  df_darwincore #> # A tibble: 2 × 11 #>   date       time     month     day     n crs   country continent scientificName #>   <chr>      <chr>    <chr>   <dbl> <dbl> <chr> <chr>   <chr>     <chr>          #> 1 14-01-2023 10:23:00 January   100     2 WGS84 Austra… Oceania   Callocephalon… #> 2 15-01-2023 11:25:00 Februa…   101     3 WGS8d Denmark Europe    Eolophus rose… #> # ℹ 2 more variables: decimalLatitude <dbl>, decimalLongitude <dbl>"},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"suggest-a-workflow","dir":"Articles","previous_headings":"","what":"Suggest a workflow","title":"Quick start guide","text":"Unsure start? Confused minimum requirements share data? Using suggest_workflow() easiest way get started corella. suggest_workflow() provides high level summary designed show: column names match valid Darwin Core terms minimum requirements data Darwin Core Archive (.e. completed data resource Darwin Core standard). suggested workflow help add minimum required columns Additional functions added piped workflow (based provided dataset’s matching Darwin Core column names) intention suggest_workflow() provide general help function whenever users feel uncertain next. Let’s see output says original dataframe df. suggest_workflow() update suggested function pipe suggest functions necessary standardise data correctly. example, using one suggested functions set_occurrences(), run suggest_workflow() , output message longer suggests set_occurrences().","code":"df |>   suggest_workflow() #>  #> ── Matching Darwin Core terms ────────────────────────────────────────────────── #> Matched 4 of 11 column names to DwC terms: #> ✔ Matched: continent, country, day, month #> ✖ Unmatched: crs, date, latitude, longitude, n, species, time #>  #> ── Minimum required Darwin Core terms ────────────────────────────────────────── #>  #>   Type                      Matched term(s)  Missing term(s)                                                                 #> ✖ Identifier (at least one) -                occurrenceID, catalogNumber, recordNumber                                        #> ✖ Record type               -                basisOfRecord                                                                    #> ✖ Scientific name           -                scientificName                                                                   #> ✖ Location                  -                decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters  #> ✖ Date/Time                 -                eventDate #>  #> ── Suggested workflow ────────────────────────────────────────────────────────── #>  #> To make your data Darwin Core compliant, use the following workflow: #>  #> df |> #>   set_occurrences() |> #>   set_datetime() |> #>   set_coordinates() |> #>   set_scientific_name() #>  #> ── Additional functions #> Based on your matched terms, you can also add to your pipe: #> • `set_datetime()` `set_locality()` #> ℹ See all `set_` functions at #>   http://corella.ala.org.au/reference/index.html#add-rename-or-edit-columns-to-match-darwin-core-terms df_edited <- df |>   set_occurrences(     occurrenceID = seq_len(nrow(df)),     basisOfRecord = \"humanObservation\"     ) df_edited |>   suggest_workflow() #>  #> ── Matching Darwin Core terms ────────────────────────────────────────────────── #> Matched 6 of 13 column names to DwC terms: #> ✔ Matched: basisOfRecord, continent, country, day, month, occurrenceID #> ✖ Unmatched: crs, date, latitude, longitude, n, species, time #>  #> ── Minimum required Darwin Core terms ────────────────────────────────────────── #>  #>   Type                      Matched term(s)  Missing term(s)                                                                 #> ✔ Identifier (at least one) occurrenceID     -                                                                                #> ✔ Record type               basisOfRecord    -                                                                                #> ✖ Scientific name           -                scientificName                                                                   #> ✖ Location                  -                decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters  #> ✖ Date/Time                 -                eventDate #>  #> ── Suggested workflow ────────────────────────────────────────────────────────── #>  #> To make your data Darwin Core compliant, use the following workflow: #>  #> df |> #>   set_datetime() |> #>   set_coordinates() |> #>   set_scientific_name() #>  #> ── Additional functions #> Based on your matched terms, you can also add to your pipe: #> • `set_datetime()` `set_locality()` #> ℹ See all `set_` functions at #>   http://corella.ala.org.au/reference/index.html#add-rename-or-edit-columns-to-match-darwin-core-terms"},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"test-your-data","dir":"Articles","previous_headings":"","what":"Test your data","title":"Quick start guide","text":"dataset already uses valid Darwin Core terms column names, instead working set_ function, might wish run tests entire dataset. run checks data like test suite, use check_dataset(). Much like devtools::test() devtools::check(), check_dataset() runs relevant check matching Darwin Core column returns summary results, along error messages returned checks. goal check_dataset() make running many checks efficient, cater users prefer test-suite-like workflow.","code":"df <- tibble(   latitude = c(-35.310, \"-35.273\"), # deliberate error for demonstration purposes   longitude = c(149.125, 149.133),   date = c(\"14-01-2023\", \"15-01-2023\"),   individualCount = c(0, 2),   species = c(\"Callocephalon fimbriatum\", \"Eolophus roseicapilla\"),   country = c(\"AU\", \"AU\"),   occurrenceStatus = c(\"present\", \"present\")   )  df |>   check_dataset() #> ℹ Testing data #> ✔ | E P | Column #> ⠙ | 0  individualCount #> ⠹ | 1 ✖ | individualCount #> ✔ | 1 ✖ | individualCount  [54ms] #>  #> ⠙ | 0  country #> ✔ | 1 ✖ | country          [25ms] #>  #> ══ Results ═════════════════════════════════════════════════════════════════════ #>  #> [ Errors: 2 | Pass: 0 ] #> ℹ Checking Darwin Core compliance #> ✖ Data does not meet minimum Darwin Core column requirements #> ℹ Use `suggest_workflow()` to see more information. #> ── Error in term ─────────────────────────────────────────────────────────────── #>  #> individualCount values do not match occurrenceStatus. #> ✖ Found 1 row where individualCount = 0 but occurrenceStatus = \"present\". #> Unexpected value in country. #> ✖ Invalid value: \"AU\""},{"path":"https://corella.ala.org.au/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dax Kellie. Author, maintainer. Shandiya Balasubramanium. Author. Martin Westgate. Author.","code":""},{"path":"https://corella.ala.org.au/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kellie D, Balasubramanium S, Westgate M (2025). corella: Prepare, Manipulate Check Data Comply Darwin Core Standard. R package version 0.1.4, https://corella.ala.org.au.","code":"@Manual{,   title = {corella: Prepare, Manipulate and Check Data to Comply with Darwin Core Standard},   author = {Dax Kellie and Shandiya Balasubramanium and Martin Westgate},   year = {2025},   note = {R package version 0.1.4},   url = {https://corella.ala.org.au}, }"},{"path":[]},{"path":"https://corella.ala.org.au/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Prepare, Manipulate and Check Data to Comply with Darwin Core Standard","text":"corella R package helps users standardize data using Darwin Core data standard, used biodiversity data like species occurrences. corella provides tools prepare, manipulate validate data standard’s criteria. standardized, data can subsequently shared Darwin Core Archive published open data infrastructures like Atlas Living Australia GBIF. corella built, maintained, Science & Decision Support Team Atlas Living Australia (ALA). named Little Corella (Cacatua sanguinea). logo designed Dax Kellie. comments, questions suggestions, please contact us.","code":""},{"path":"https://corella.ala.org.au/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prepare, Manipulate and Check Data to Comply with Darwin Core Standard","text":"Install CRAN: Install development version corella GitHub:","code":"install.packages(\"corella\") # install.packages(\"devtools\") devtools::install_github(\"AtlasOfLivingAustralia/corella\")"},{"path":"https://corella.ala.org.au/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Prepare, Manipulate and Check Data to Comply with Darwin Core Standard","text":"small sample example data containing observations cockatoos. Using corella can convert data use Darwin Core Standard. One important aspects Darwin Core Standard using standard column names (Darwin Core terms). can update column names data match Darwin Core terms set_ functions. set_ function name corresponds type data, argument names correspond available Darwin Core terms use column names. set_ functions support data wrangling operations & dplyr::mutate() functionality, meaning columns can changed fixed pipe. set_ functions indicate anything needs fixing also automatically run checks column data make sure column correct format. sure start? Use suggest_workflow() know steps need make make data Darwin Core compliant. , data nearly ready want run checks columns match Darwin Core terms, run check_dataset().","code":"library(corella) library(tibble)  # A simple example of species occurrence data df <- tibble(   species = c(\"Callocephalon fimbriatum\", \"Eolophus roseicapilla\"),   latitude = c(-35.310, \"-35.273\"), # deliberate error for demonstration purposes   longitude = c(149.125, 149.133),   eventDate = c(\"14-01-2023\", \"15-01-2023\"),   status = c(\"present\", \"present\") )  df #> # A tibble: 2 × 5 #>   species                  latitude longitude eventDate  status  #>   <chr>                    <chr>        <dbl> <chr>      <chr>   #> 1 Callocephalon fimbriatum -35.31        149. 14-01-2023 present #> 2 Eolophus roseicapilla    -35.273       149. 15-01-2023 present suppressMessages( # for readability  df |>   set_coordinates(     decimalLatitude = as.numeric(latitude), # fix latitude     decimalLongitude = longitude     ) |>   set_scientific_name(     scientificName = species     ) |>   set_datetime(     eventDate = lubridate::dmy(eventDate) # specify date format     ) |>   set_occurrences(occurrenceStatus = status)  ) #> # A tibble: 2 × 5 #>   eventDate  decimalLatitude decimalLongitude scientificName    occurrenceStatus #>   <date>               <dbl>            <dbl> <chr>             <chr>            #> 1 2023-01-14           -35.3             149. Callocephalon fi… present          #> 2 2023-01-15           -35.3             149. Eolophus roseica… present df |>    suggest_workflow() #>  #> ── Matching Darwin Core terms ────────────────────────────────────────────────── #> Matched 1 of 5 column names to DwC terms: #> ✔ Matched: eventDate #> ✖ Unmatched: latitude, longitude, species, status #>  #> ── Minimum required Darwin Core terms ────────────────────────────────────────── #>  #>   Type                      Matched term(s)  Missing term(s)                                                                 #> ✔ Date/Time                 eventDate        -                                                                                #> ✖ Identifier (at least one) -                occurrenceID, catalogNumber, recordNumber                                        #> ✖ Record type               -                basisOfRecord                                                                    #> ✖ Scientific name           -                scientificName                                                                   #> ✖ Location                  -                decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters #>  #> ── Suggested workflow ────────────────────────────────────────────────────────── #>  #> To make your data Darwin Core compliant, use the following workflow: #> df |> #>   set_occurrences() |> #>   set_coordinates() |> #>   set_scientific_name() #>  #> ── Additional functions #> ℹ See all `set_` functions at #>   http://corella.ala.org.au/reference/index.html#add-rename-or-edit-columns-to-match-darwin-core-terms df |>   check_dataset() #> ℹ Testing data #> ✔ | E P | Column #> ⠙ | 0 eventDate #> ⠹ | 1 ✖ | eventDate ✔ | 1 ✖ | eventDate  [111ms] #> ══ Results ═════════════════════════════════════════════════════════════════════ #>  #> [ Errors: 1 | Pass: 0 ] #> ℹ Checking Darwin Core compliance #> ✖ Data does not meet minimum Darwin Core column requirements #> ℹ Use `suggest_workflow()` to see more information. #> ── Error in term ─────────────────────────────────────────────────────────────── #>  #> eventDate must be a Date vector, not a character. #> ℹ Specify date format with lubridate functions e.g. `ymd()`, `mdy()`, or #> `dmy()`."},{"path":"https://corella.ala.org.au/index.html","id":"citing-corella","dir":"","previous_headings":"","what":"Citing corella","title":"Prepare, Manipulate and Check Data to Comply with Darwin Core Standard","text":"generate citation package version using, can run: current recommended citation : Kellie D, Balasubramaniam S & Westgate MJ (2025) corella: Tools standardize biodiversity data Darwin Core. R Package version 0.1.4.","code":"citation(package = \"corella\")"},{"path":"https://corella.ala.org.au/reference/accepted_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Select support functions — occurrence_terms","title":"Select support functions — occurrence_terms","text":"creating Darwin Core archive, often useful select fields conform standard. functions provide vector terms can used combination dplyr::select() dplyr::any_of() quickly select Darwin Core terms relevant data type (events, occurrences, media).","code":""},{"path":"https://corella.ala.org.au/reference/accepted_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select support functions — occurrence_terms","text":"","code":"occurrence_terms()  event_terms()"},{"path":"https://corella.ala.org.au/reference/accepted_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select support functions — occurrence_terms","text":"vector accepted (mandatory) values use case.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/accepted_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select support functions — occurrence_terms","text":"","code":"# Return a vector of accepted terms in an Occurrence-based dataset occurrence_terms() |> head(10L) # first 10 terms #>  [1] \"type\"                  \"modified\"              \"language\"              #>  [4] \"license\"               \"rightsHolder\"          \"accessRights\"          #>  [7] \"bibliographicCitation\" \"references\"            \"institutionID\"         #> [10] \"collectionID\"           # Use this vector to filter a data frame df <- tibble::tibble(   name = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\"),   measurement1 = c(24.3, 24.9, 20.1), # example measurement column   measurement2 = c(0.92, 1.03, 1.09)  # example measurement column   )  df |>   dplyr::select(any_of(occurrence_terms())) #> # A tibble: 3 × 1 #>   eventDate  #>   <chr>      #> 1 2010-10-14 #> 2 2010-10-14 #> 3 2010-10-14"},{"path":"https://corella.ala.org.au/reference/accepted_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Accepted value functions — basisOfRecord_values","title":"Accepted value functions — basisOfRecord_values","text":"creating Darwin Core Archive, several fields vocabulary acceptable values. functions provide vector terms can used fill validate fields.","code":""},{"path":"https://corella.ala.org.au/reference/accepted_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accepted value functions — basisOfRecord_values","text":"","code":"basisOfRecord_values()  countryCode_values()"},{"path":"https://corella.ala.org.au/reference/accepted_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accepted value functions — basisOfRecord_values","text":"vector accepted values use case.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/accepted_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accepted value functions — basisOfRecord_values","text":"","code":"# See all valid basis of record values basisOfRecord_values() #> [1] \"humanObservation\"   \"machineObservation\" \"livingSpecimen\"     #> [4] \"preservedSpecimen\"  \"fossilSpecimen\"     \"materialCitation\""},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a dataset for Darwin Core conformance — check_dataset","title":"Check a dataset for Darwin Core conformance — check_dataset","text":"Run test suite checks test whether data.frame tibble conforms Darwin Core Standard. users want call suggest_workflow(), underlying check functions exported detailed work, debugging. function useful users experienced Darwin Core Standard final dataset checks.","code":""},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a dataset for Darwin Core conformance — check_dataset","text":"","code":"check_dataset(.df)"},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a dataset for Darwin Core conformance — check_dataset","text":".df tibble checks run","code":""},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a dataset for Darwin Core conformance — check_dataset","text":"Invisibly returns input data frame, primarily called side-effect running check functions input.","code":""},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check a dataset for Darwin Core conformance — check_dataset","text":"check_dataset() modelled devtools::test(). runs series checks, supplies summary passed/failed checks error messages. Checks run check_dataset() run automatically various set_ functions piped workflow. function allows users minor expected updates check entire dataset without need set_ functions.","code":""},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check a dataset for Darwin Core conformance — check_dataset","text":"","code":"# \\donttest{ df <- tibble::tibble(   scientificName = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\"),   status = c(\"present\", \"present\", \"present\")   )  # Run a test suite of checks for Darwin Core Standard conformance # Checks are only run on columns with names that match Darwin Core terms df |>   check_dataset() #> ℹ Testing data #> ✔ | E P | Column         #> ⠙ | 0  scientificName  #> ✔ | 0 ✔ | scientificName  [12ms] #>  #> ⠙ | 0  eventDate       #> ✔ | 1 ✖ | eventDate       [37ms] #>  #>  #> ══ Results ═════════════════════════════════════════════════════════════════════ #>  #> [ Errors: 1 | Pass: 1 ] #>  #> ℹ Checking Darwin Core compliance #> ✖ Data does not meet minimum Darwin Core column requirements #> ℹ Use `suggest_workflow()` to see more information. #>  #>  #> ── Error in term ─────────────────────────────────────────────────────────────── #>  #> eventDate must be a Date vector, not a character. #> ℹ Specify date format with lubridate functions e.g. `ymd()`, `mdy()`, or #> `dmy()`. #>  # }"},{"path":"https://corella.ala.org.au/reference/corella-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Build shareable biodiversity datasets — corella-package","title":"Build shareable biodiversity datasets — corella-package","text":"corella data preparation, editing checking data follow Darwin Core Standard, global data standard store, document, share biodiversity information. package provides tools manipulate data conform , check validity , Darwin Core Standard. Using corella allow users verify data can used build 'Darwin Core Archives' using galaxias package. package named genus Australian birds. logo image Little Corella (Cacatua sanguinea), designed Dax Kellie.","code":""},{"path":"https://corella.ala.org.au/reference/corella-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Build shareable biodiversity datasets — corella-package","text":"Suggest start suggest_workflow() summary column names match Darwin Core terms data, workflow adding editing . Add Darwin Core Terms following functions add single DwC fields, collections related fields, existing tibble. set_events() basic information observation events (eventID, parentEventID, eventType) set_occurrences() basic information observations (occurrenceID, basisOfRecord, occurrencesStatus) set_scientific_name() record highest level taxonomic specificity dataset (scientificName, scientificNameAuthorship, taxonRank) set_taxonomy() specify higher taxonomic columns (kingdom, phylum, class, order, family, genus, species, specificEpithet, vernacularName) set_coordinates() spatial data (decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters, coordinatePrecision) set_coordinates_sf() spatial data sf format set_locality() spatial descriptions (continent, country, countryCode, stateProvince, locality) set_datetime() temporal data (eventDate, year, month, day, eventTime) set_collection() give museum- collection- specific information (datasetID, datasetName, catalogNumber) set_observer() specify made observation (recordedByID, recordedBy) set_abundance() state many animals seen observation (individualCount, organismQuantity, organismQuantityType) set_individual_traits() attributes individuals measured (individualID, lifeStage, sex, vitality, reproductiveCondition) set_license() specify license rights information (license, rightsHolder, accessRights) set_measurements() measurement columns, .e. 'Measurement Fact' data (optional) Check data Darwin Core compliance wrapper function checking tibbles Darwin Core compliance check_dataset(). calls internal check functions checking data columns matching Darwin Core terms. Helper functions functions called within use_ (mutate() functions), assist common problems. composite_id() Supply combination variables concatenate unique identifier, optionally incorporating sequential_id() random_id(). occurrence_terms() event_terms() return vector accepted terms different use cases. basisOfRecord_values() countryCode_values() return vector accepted values basisOfRecord countryCode (respectively) Data Datasets support usage Darwin Core. darwin_core_terms tibble accepted terms, including URIs usage notes country_codes tibble codes accepted countryCode","code":""},{"path":"https://corella.ala.org.au/reference/corella-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build shareable biodiversity datasets — corella-package","text":"questions, comments suggestions, please email support@ala.org.au.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/corella-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build shareable biodiversity datasets — corella-package","text":"Maintainer: Dax Kellie dax.kellie@csiro.au Authors: Shandiya Balasubramanium shandiya.balasubramanium@csiro.au Martin Westgate martin.westgate@csiro.au","code":""},{"path":"https://corella.ala.org.au/reference/country_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset of supported Country Codes — country_codes","title":"Dataset of supported Country Codes — country_codes","text":"tibble ISO 3166-1 alpha-2 codes countries, accepted standard supplying countryCode Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/country_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset of supported Country Codes — country_codes","text":"","code":"country_codes"},{"path":"https://corella.ala.org.au/reference/country_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset of supported Country Codes — country_codes","text":"tibble containing valid country codes (249 rows x 3 columns). Column descriptions follows: name ISO 3166-1 alpha-2 code, pointing ISO 3166-2 article. code English short name officially used ISO 3166 Maintenance Agency (ISO 3166/MA). year Year alpha-2 code first officially assigned.","code":""},{"path":"https://corella.ala.org.au/reference/country_codes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dataset of supported Country Codes — country_codes","text":"Wikipedia.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/darwin_core_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset of supported Darwin Core terms — darwin_core_terms","title":"Dataset of supported Darwin Core terms — darwin_core_terms","text":"Darwin Core Standard maintained Biodiversity Information Standards, previously known Taxonomic Databases Working Group known acronym 'TDWG'. tibble full list supported terms, current 2024-12-10. Users can use occurrence_terms() event_terms() convenience functions access terms.","code":""},{"path":"https://corella.ala.org.au/reference/darwin_core_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset of supported Darwin Core terms — darwin_core_terms","text":"","code":"darwin_core_terms"},{"path":"https://corella.ala.org.au/reference/darwin_core_terms.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset of supported Darwin Core terms — darwin_core_terms","text":"tibble containing valid Darwin Core Standard terms (206 rows x 6 columns). Column descriptions follows: class TDWG group term belongs . term Column header names can used Darwin Core url Stable url information describing term. definition Human-readable definition term. comments information TDWG. examples Examples field populated. set_functions Function corella supports Darwin Core term.","code":""},{"path":"https://corella.ala.org.au/reference/darwin_core_terms.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dataset of supported Darwin Core terms — darwin_core_terms","text":"Slightly modified version table supplied TDWG.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/identifier_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Create unique identifier columns — composite_id","title":"Create unique identifier columns — composite_id","text":"unique identifier pattern words, letters /numbers unique single record within dataset. Unique identifiers useful identify individual observations, make possible change, amend delete observations time. also prevent accidental deletion one record contains information(otherwise considered duplicate). identifier functions corella make easier generate columns unique identifiers dataset. functions can used within set_events(), set_occurrences(), (equivalently) dplyr::mutate().","code":""},{"path":"https://corella.ala.org.au/reference/identifier_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create unique identifier columns — composite_id","text":"","code":"composite_id(..., sep = \"-\")  sequential_id(width)  random_id()"},{"path":"https://corella.ala.org.au/reference/identifier_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create unique identifier columns — composite_id","text":"... Zero variable names tibble mutated (unquoted), /zero _id functions, separated commas. sep Character used separate field values. Defaults \"-\" width (Integer) many characters resulting string ? Defaults one plus order magnitude largest number.","code":""},{"path":"https://corella.ala.org.au/reference/identifier_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create unique identifier columns — composite_id","text":"amended tibble containing column identifiers requested format.","code":""},{"path":"https://corella.ala.org.au/reference/identifier_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create unique identifier columns — composite_id","text":"Generally speaking, better use existing information dataset generate identifiers. reason recommend using composite_id() aggregate existing fields, composite already present within dataset. Composite IDs meaningful stable; easier check harder overwrite. possible call sequential_id() random_id() within composite_id() combine existing new columns.","code":""},{"path":"https://corella.ala.org.au/reference/identifier_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create unique identifier columns — composite_id","text":"","code":"df <- tibble::tibble(   eventDate = paste0(rep(c(2020:2024), 3), \"-01-01\"),   basisOfRecord = \"humanObservation\",   site = rep(c(\"A01\", \"A02\", \"A03\"), each = 5)   )  # Add composite ID using a random ID, site name and eventDate df |>   set_occurrences(     occurrenceID = composite_id(random_id(),                                 site,                                 eventDate)     ) #> ⠙ Checking 2 columns: basisOfRecord and occurrenceID #> ⠹ Checking 2 columns: basisOfRecord and occurrenceID #> ✔ Checking 2 columns: basisOfRecord and occurrenceID [641ms] #>  #> # A tibble: 15 × 4 #>    eventDate  basisOfRecord    site  occurrenceID                                #>    <chr>      <chr>            <chr> <chr>                                       #>  1 2020-01-01 humanObservation A01   7ee7888c-0853-11f0-a2bb-7c1e526f45b2-A01-2… #>  2 2021-01-01 humanObservation A01   7ee788a0-0853-11f0-a2bb-7c1e526f45b2-A01-2… #>  3 2022-01-01 humanObservation A01   7ee788a1-0853-11f0-a2bb-7c1e526f45b2-A01-2… #>  4 2023-01-01 humanObservation A01   7ee788a2-0853-11f0-a2bb-7c1e526f45b2-A01-2… #>  5 2024-01-01 humanObservation A01   7ee788aa-0853-11f0-a2bb-7c1e526f45b2-A01-2… #>  6 2020-01-01 humanObservation A02   7ee788ab-0853-11f0-a2bb-7c1e526f45b2-A02-2… #>  7 2021-01-01 humanObservation A02   7ee788ac-0853-11f0-a2bb-7c1e526f45b2-A02-2… #>  8 2022-01-01 humanObservation A02   7ee788b4-0853-11f0-a2bb-7c1e526f45b2-A02-2… #>  9 2023-01-01 humanObservation A02   7ee788b5-0853-11f0-a2bb-7c1e526f45b2-A02-2… #> 10 2024-01-01 humanObservation A02   7ee788be-0853-11f0-a2bb-7c1e526f45b2-A02-2… #> 11 2020-01-01 humanObservation A03   7ee788bf-0853-11f0-a2bb-7c1e526f45b2-A03-2… #> 12 2021-01-01 humanObservation A03   7ee788c8-0853-11f0-a2bb-7c1e526f45b2-A03-2… #> 13 2022-01-01 humanObservation A03   7ee788c9-0853-11f0-a2bb-7c1e526f45b2-A03-2… #> 14 2023-01-01 humanObservation A03   7ee788d2-0853-11f0-a2bb-7c1e526f45b2-A03-2… #> 15 2024-01-01 humanObservation A03   7ee788d3-0853-11f0-a2bb-7c1e526f45b2-A03-2…  # Add composite ID using a sequential number, site name and eventDate df |>   set_occurrences(     occurrenceID = composite_id(sequential_id(),                                 site,                                 eventDate)     ) #> ⠙ Checking 2 columns: basisOfRecord and occurrenceID #> ✔ Checking 2 columns: basisOfRecord and occurrenceID [618ms] #>  #> # A tibble: 15 × 4 #>    eventDate  basisOfRecord    site  occurrenceID       #>    <chr>      <chr>            <chr> <chr>              #>  1 2020-01-01 humanObservation A01   001-A01-2020-01-01 #>  2 2021-01-01 humanObservation A01   002-A01-2021-01-01 #>  3 2022-01-01 humanObservation A01   003-A01-2022-01-01 #>  4 2023-01-01 humanObservation A01   004-A01-2023-01-01 #>  5 2024-01-01 humanObservation A01   005-A01-2024-01-01 #>  6 2020-01-01 humanObservation A02   006-A02-2020-01-01 #>  7 2021-01-01 humanObservation A02   007-A02-2021-01-01 #>  8 2022-01-01 humanObservation A02   008-A02-2022-01-01 #>  9 2023-01-01 humanObservation A02   009-A02-2023-01-01 #> 10 2024-01-01 humanObservation A02   010-A02-2024-01-01 #> 11 2020-01-01 humanObservation A03   011-A03-2020-01-01 #> 12 2021-01-01 humanObservation A03   012-A03-2021-01-01 #> 13 2022-01-01 humanObservation A03   013-A03-2022-01-01 #> 14 2023-01-01 humanObservation A03   014-A03-2023-01-01 #> 15 2024-01-01 humanObservation A03   015-A03-2024-01-01"},{"path":"https://corella.ala.org.au/reference/set_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with abundance information — set_abundance","title":"Set, create or modify columns with abundance information — set_abundance","text":"field methods, common observe one individual per observation; observe abundance using non-integer measures mass area; seek individuals find (abundance zero). approaches use different Darwin Core terms, function assists specifying abundances tibble using Darwin Core Standard. practice different using mutate(), gives informative errors, serves useful lookup columns abundance information represented Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with abundance information — set_abundance","text":"","code":"set_abundance(   .df,   individualCount = NULL,   organismQuantity = NULL,   organismQuantityType = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/set_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with abundance information — set_abundance","text":".df data.frame tibble column appended . individualCount number individuals present organismQuantity number enumeration value quantity organisms. Used together organismQuantityType provide context. organismQuantityType type quantification system used organismQuantity. .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with abundance information — set_abundance","text":"tibble requested fields added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_abundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with abundance information — set_abundance","text":"Examples organismQuantity & organismQuantityType values: 27 (organismQuantity) individuals (organismQuantityType) 12.5 (organismQuantity) % biomass (organismQuantityType) r (organismQuantity) Braun-Blanquet Scale (organismQuantityType) many (organismQuantity) individuals (organismQuantityType)","code":""},{"path":"https://corella.ala.org.au/reference/set_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with abundance information — set_abundance","text":"","code":"df <- tibble::tibble(   scientificName = c(\"Cacatua (Licmetis) tenuirostris\",                      \"Cacatua (Licmetis) tenuirostris\",                      \"Cacatua (Licmetis) tenuirostris\"),   n_obs = c(1, 3, 4)   )  df |>   set_abundance(individualCount = n_obs) #> ⠙ Checking 1 column: individualCount #> ✔ Checking 1 column: individualCount [310ms] #>  #> # A tibble: 3 × 2 #>   scientificName                  individualCount #>   <chr>                                     <dbl> #> 1 Cacatua (Licmetis) tenuirostris               1 #> 2 Cacatua (Licmetis) tenuirostris               3 #> 3 Cacatua (Licmetis) tenuirostris               4"},{"path":"https://corella.ala.org.au/reference/set_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with museum- or collection-specific information — set_collection","title":"Set, create or modify columns with museum- or collection-specific information — set_collection","text":"Format fields specify collection catalog number specimen occurrence record tibble using Darwin Core Standard. practice different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with museum- or collection-specific information — set_collection","text":"","code":"set_collection(   .df,   datasetID = NULL,   datasetName = NULL,   catalogNumber = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/set_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with museum- or collection-specific information — set_collection","text":".df data.frame tibble column appended . datasetID identifier set data. May global unique identifier identifier specific collection institution. datasetName name identifying data set record derived. catalogNumber unique identifier record within data set collection. .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with museum- or collection-specific information — set_collection","text":"tibble requested fields added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_collection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with museum- or collection-specific information — set_collection","text":"Examples datasetID values: b15d4952-7d20-46f1-8a3e-556a512b04c5 Examples datasetName values: Grinnell Resurvey Mammals Lacey Ctenomys Recaptures Examples catalogNumber values: 145732 145732a 2008.1334 R-4313","code":""},{"path":"https://corella.ala.org.au/reference/set_collection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with museum- or collection-specific information — set_collection","text":"","code":"df <- tibble::tibble(   name = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\"),   catalog_num = c(\"16789a\", \"16789c\", \"08742f\"),   dataset = c(\"Frog search\", \"Frog search\", \"Frog search\")   )  # Reformat columns to Darwin Core terms df |>   set_collection(     catalogNumber = catalog_num,     datasetName = dataset     ) #> ⠙ Checking 2 columns: catalogNumber and datasetName #> ✔ Checking 2 columns: catalogNumber and datasetName [617ms] #>  #> # A tibble: 3 × 4 #>   name             eventDate  catalogNumber datasetName #>   <chr>            <chr>      <chr>         <chr>       #> 1 Crinia Signifera 2010-10-14 16789a        Frog search #> 2 Crinia Signifera 2010-10-14 16789c        Frog search #> 3 Litoria peronii  2010-10-14 08742f        Frog search"},{"path":"https://corella.ala.org.au/reference/set_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with spatial information — set_coordinates","title":"Set, create or modify columns with spatial information — set_coordinates","text":"function helps format standard location fields like latitude longitude point coordinates tibble using Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with spatial information — set_coordinates","text":"","code":"set_coordinates(   .df,   decimalLatitude = NULL,   decimalLongitude = NULL,   geodeticDatum = NULL,   coordinateUncertaintyInMeters = NULL,   coordinatePrecision = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/set_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with spatial information — set_coordinates","text":".df data.frame tibble column appended . decimalLatitude latitude decimal degrees. decimalLongitude longitude decimal degrees. geodeticDatum datum spatial reference system coordinates recorded (usually \"WGS84\" \"EPSG:4326\"). often known Coordinate Reference System (CRS). coordinates GPS system, data already using WGS84. coordinateUncertaintyInMeters (numeric) Radius smallest circle contains whole location, given possible measurement error. coordinateUncertaintyInMeters typically around 30 (metres) recorded GPS 2000, 100 year. coordinatePrecision (numeric) precision decimalLatitude decimalLongitude supplied . coordinatePrecision less 0.00001 data collected using GPS. .keep Control columns .df retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with spatial information — set_coordinates","text":"tibble requested columns added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_coordinates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with spatial information — set_coordinates","text":"practice different using mutate(), gives informative errors, serves useful lookup spatial columns represented Darwin Core Standard. Example values : geodeticDatum valid EPSG code","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/set_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with spatial information — set_coordinates","text":"","code":"df <- tibble::tibble(   scientificName = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\")   )  # Reformat columns to Darwin Core Standard terms df |>   set_coordinates(     decimalLongitude = longitude,     decimalLatitude = latitude     ) #> ⠙ Checking 2 columns: decimalLatitude and decimalLongitude #> ⠹ Checking 2 columns: decimalLatitude and decimalLongitude #> ✔ Checking 2 columns: decimalLatitude and decimalLongitude [630ms] #>  #> # A tibble: 3 × 4 #>   scientificName   eventDate  decimalLatitude decimalLongitude #>   <chr>            <chr>                <dbl>            <dbl> #> 1 Crinia Signifera 2010-10-14           -35.3             149. #> 2 Crinia Signifera 2010-10-14           -35.2             149. #> 3 Litoria peronii  2010-10-14           -35.8             149."},{"path":"https://corella.ala.org.au/reference/set_coordinates_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with sf spatial information — set_coordinates_sf","title":"Set, create or modify columns with sf spatial information — set_coordinates_sf","text":"function helps format standard location fields like longitude latitude point coordinates tibble using Darwin Core Standard. differs set_coordinates() accepting sf geometry columns class POINTas coordinates (rather numeric lat/lon coordinates). advantage using sf geometry Coordinate Reference System (CRS) automatically formatted required geodeticDatum column.","code":""},{"path":"https://corella.ala.org.au/reference/set_coordinates_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with sf spatial information — set_coordinates_sf","text":"","code":"set_coordinates_sf(.df, geometry = NULL, .keep = \"unused\")"},{"path":"https://corella.ala.org.au/reference/set_coordinates_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with sf spatial information — set_coordinates_sf","text":".df data.frame tibble column appended . geometry latitude/longitude coordinates sf POINT class .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_coordinates_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with sf spatial information — set_coordinates_sf","text":"tibble requested columns added/reformatted.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/set_coordinates_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with sf spatial information — set_coordinates_sf","text":"","code":"df <- tibble::tibble(   scientificName = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\")   ) |>   sf::st_as_sf(coords = c(\"longitude\", \"latitude\")) |>   sf::st_set_crs(4326)  # Reformat columns to Darwin Core Standard terms. # Coordinates and CRS are automatically detected and reformatted. df |>   set_coordinates_sf() #> ⠙ Checking 1 column: geometry #> ✔ Checking 1 column: geometry [316ms] #>  #> • Converted geometry → decimalLongitude, decimalLatitude, and geodeticDatum. #> Warning: geometry dropped from data frame. #> # A tibble: 3 × 5 #>   scientificName   eventDate  decimalLongitude decimalLatitude geodeticDatum #> * <chr>            <chr>                 <dbl>           <dbl> <chr>         #> 1 Crinia Signifera 2010-10-14             149.           -35.3 EPSG:4326     #> 2 Crinia Signifera 2010-10-14             149.           -35.2 EPSG:4326     #> 3 Litoria peronii  2010-10-14             149.           -35.8 EPSG:4326"},{"path":"https://corella.ala.org.au/reference/set_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with date and time information — set_datetime","title":"Set, create or modify columns with date and time information — set_datetime","text":"function helps format standard date/time columns tibble using Darwin Core Standard. Users make use lubridate package format dates corella can read correctly. practice different using mutate(), gives informative errors, serves useful lookup spatial fields represented Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with date and time information — set_datetime","text":"","code":"set_datetime(   .df,   eventDate = NULL,   year = NULL,   month = NULL,   day = NULL,   eventTime = NULL,   .keep = \"unused\",   .messages = TRUE )"},{"path":"https://corella.ala.org.au/reference/set_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with date and time information — set_datetime","text":".df data.frame tibble column appended . eventDate date date + time observation/event occurred. year year observation/event. month month observation/event. day day observation/event. eventTime time event. Use term Event data. Date + time information observations accepted eventDate. .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . .messages (logical) informative messages shown? Defaults TRUE.","code":""},{"path":"https://corella.ala.org.au/reference/set_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with date and time information — set_datetime","text":"tibble requested columns added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_datetime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with date and time information — set_datetime","text":"Example values : eventDate class Date POSITct. suggest using lubridate package define define date format using functions like ymd(), mdy, dmy(), including date + time, ymd_hms(), ymd_hm(), ymd_h().","code":""},{"path":"https://corella.ala.org.au/reference/set_datetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with date and time information — set_datetime","text":"","code":"df <- tibble::tibble(   name = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   date = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\"),   time = c(\"10:08:12\", \"13:01:45\", \"14:02:33\") )  # Use the lubridate package to format date + time information # eventDate accepts date + time df |>   set_datetime(     eventDate = lubridate::ymd_hms(paste(date, time))   ) #> ⠙ Checking 1 column: eventDate #> ✔ Checking 1 column: eventDate [311ms] #>  #> # A tibble: 3 × 4 #>   name             latitude longitude eventDate           #>   <chr>               <dbl>     <dbl> <dttm>              #> 1 Crinia Signifera    -35.3      149. 2010-10-14 10:08:12 #> 2 Crinia Signifera    -35.2      149. 2010-10-14 13:01:45 #> 3 Litoria peronii     -35.8      149. 2010-10-14 14:02:33"},{"path":"https://corella.ala.org.au/reference/set_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with Event information — set_events","title":"Set, create or modify columns with Event information — set_events","text":"Identify format columns contain information Event. \"Event\" Darwin Core Standard refers action occurs place time. Examples include: specimen collecting event survey sampling event camera trap image capture marine trawl camera trap deployment event camera trap burst image event (many images one observation) practice function used differently mutate(), gives users informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with Event information — set_events","text":"","code":"set_events(   .df,   eventID = NULL,   eventType = NULL,   parentEventID = NULL,   .keep = \"unused\",   .keep_composite = \"all\" )"},{"path":"https://corella.ala.org.au/reference/set_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with Event information — set_events","text":".df data.frame tibble column appended . eventID unique identifier individual Event. eventType type Event parentEventID parent event one Events sit within. .keep Control columns .df retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate . .keep_composite Control columns .df kept composite_id() used assign values eventID, defaulting \"\". different default .keep composite identifiers often contain information valuable contexts, meaning deleting columns default typically unwise.","code":""},{"path":"https://corella.ala.org.au/reference/set_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with Event information — set_events","text":"tibble requested fields added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with Event information — set_events","text":"Event requires unique eventID eventType (can several types Events single dataset), along parentEventID specifies level current Event sits (e.g., individual location's survey event ID, one several survey locations specific day's set surveys ie parentEvent). Examples eventID values: INBO:VIS:Ev:00009375 Examples eventType values: Sample Observation Survey Site Visit Deployment See examples dwc.tdwg.org Examples parentEventID A1 (identify parent event nested samples, eventID - A1_1, A1_2)","code":""},{"path":"https://corella.ala.org.au/reference/set_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with Event information — set_events","text":"","code":"# example Event dataframe df <- tibble::tibble(   site_code = c(\"AMA100\", \"AMA100\", \"AMH100\"),   scientificName = c(\"Crinia signifera\", \"Crinia signifera\", \"Crinia signifera\"),   latitude = c(-35.275, -35.274, -35.101),   longitue = c(149.001, 149.004, 149.274),   )  # Add event information df |>   set_events(     eventID = composite_id(sequential_id(),                            site_code,                            year),     eventType = \"Survey\"     ) #> ⠙ Checking 2 columns: eventID and eventType #> ✔ Checking 2 columns: eventID and eventType [618ms] #>  #> # A tibble: 3 × 6 #>   site_code scientificName   latitude longitue eventID        eventType #>   <chr>     <chr>               <dbl>    <dbl> <chr>          <chr>     #> 1 AMA100    Crinia signifera    -35.3     149. 01-AMA100-year Survey    #> 2 AMA100    Crinia signifera    -35.3     149. 02-AMA100-year Survey    #> 3 AMH100    Crinia signifera    -35.1     149. 03-AMH100-year Survey"},{"path":"https://corella.ala.org.au/reference/set_individual_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with information of individual organisms — set_individual_traits","title":"Set, create or modify columns with information of individual organisms — set_individual_traits","text":"Format fields contain measurements attributes individual organisms tibble using Darwin Core Standard. Fields include specify sex, life stage condition. Individuals can identified individualID data contains resampling. practice different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_individual_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with information of individual organisms — set_individual_traits","text":"","code":"set_individual_traits(   .df,   individualID = NULL,   lifeStage = NULL,   sex = NULL,   vitality = NULL,   reproductiveCondition = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/set_individual_traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with information of individual organisms — set_individual_traits","text":".df data.frame tibble column appended . individualID identifier individual named group individual organisms represented Occurrence. Meant accommodate resampling individual group monitoring purposes. May global unique identifier identifier specific data set. lifeStage age class life stage organism time occurrence. sex sex biological individual. vitality indication whether organism alive dead time collection observation. reproductiveCondition reproductive condition biological individual. .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_individual_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with information of individual organisms — set_individual_traits","text":"tibble requested fields added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_individual_traits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with information of individual organisms — set_individual_traits","text":"Examples lifeStage values: zygote larva adult seedling flowering Examples vitality values: alive dead uncertain Examples reproductiveCondition values: non-reproductive pregnant bloom fruit bearing","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/set_individual_traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with information of individual organisms — set_individual_traits","text":"","code":"df <- tibble::tibble(   name = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\"),   id = c(4421, 4422, 3311),   life_stage = c(\"juvenile\", \"adult\", \"adult\")   )  # Reformat columns to Darwin Core Standard df |>   set_individual_traits(     individualID = id,     lifeStage = life_stage     ) #> ⠙ Checking 2 columns: individualID and lifeStage #> ✔ Checking 2 columns: individualID and lifeStage [618ms] #>  #> # A tibble: 3 × 6 #>   name             latitude longitude eventDate  individualID lifeStage #>   <chr>               <dbl>     <dbl> <chr>             <dbl> <chr>     #> 1 Crinia Signifera    -35.3      149. 2010-10-14         4421 juvenile  #> 2 Crinia Signifera    -35.2      149. 2010-10-14         4422 adult     #> 3 Litoria peronii     -35.8      149. 2010-10-14         3311 adult"},{"path":"https://corella.ala.org.au/reference/set_license.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with license and rights information — set_license","title":"Set, create or modify columns with license and rights information — set_license","text":"Format fields contain information permissions use, sharing access record tibble using Darwin Core Standard. practice function different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_license.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with license and rights information — set_license","text":"","code":"set_license(   .df,   license = NULL,   rightsHolder = NULL,   accessRights = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/set_license.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with license and rights information — set_license","text":".df data.frame tibble column appended . license legal document giving official permission something resource. Must provided url valid license. rightsHolder Person organisation owning managing rights resource. accessRights Access restrictions based privacy security. .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_license.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with license and rights information — set_license","text":"tibble requested fields added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_license.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with license and rights information — set_license","text":"Examples license values: http://creativecommons.org/publicdomain/zero/1.0/legalcode http://creativecommons.org/licenses//4.0/legalcode CC0 CC--NC 4.0 (Int) Examples rightsHolder values: Regents University California Examples accessRights values: --profit use (string example) https://www.fieldmuseum.org/field-museum-natural-history-conditions--suggested-norms-use-collections-data--images (URI example)","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/set_license.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with license and rights information — set_license","text":"","code":"df <- tibble::tibble(   name = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\"),   attributed_license = c(\"CC-BY-NC 4.0 (Int)\", \"CC-BY-NC 4.0 (Int)\", \"CC-BY-NC 4.0 (Int)\")   )  # Reformat columns to Darwin Core Standard df |>   set_license(     license = attributed_license     ) #> ⠙ Checking 1 column: license #> ✔ Checking 1 column: license [310ms] #>  #> # A tibble: 3 × 5 #>   name             latitude longitude eventDate  license            #>   <chr>               <dbl>     <dbl> <chr>      <chr>              #> 1 Crinia Signifera    -35.3      149. 2010-10-14 CC-BY-NC 4.0 (Int) #> 2 Crinia Signifera    -35.2      149. 2010-10-14 CC-BY-NC 4.0 (Int) #> 3 Litoria peronii     -35.8      149. 2010-10-14 CC-BY-NC 4.0 (Int)"},{"path":"https://corella.ala.org.au/reference/set_locality.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with locality information — set_locality","title":"Set, create or modify columns with locality information — set_locality","text":"Locality information refers description place, rather spatial coordinate. function helps format columns locality information tibble using Darwin Core Standard. practice used differently mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_locality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with locality information — set_locality","text":"","code":"set_locality(   .df,   continent = NULL,   country = NULL,   countryCode = NULL,   stateProvince = NULL,   locality = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/set_locality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with locality information — set_locality","text":".df data.frame tibble column appended . continent (string) Valid continent. See details. country Valid country name. See country_codes. countryCode Valid country code. See country_codes. stateProvince sub-national region. locality specific description location place. .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_locality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with locality information — set_locality","text":"tibble requested columns added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_locality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with locality information — set_locality","text":"Values continent one \"Africa\", \"Antarctica\", \"Asia\", \"Europe\", \"North America\", \"Oceania\" \"South America\". countryCode supplied according ISO 3166-1 ALPHA-2 standard, per TDWG advice. Examples countryCode: AUS NZ BRA Examples locality: Bariloche, 25 km NNE via Ruta Nacional 40 (=Ruta 237) Queets Rainforest, Olympic National Park","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/set_locality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with locality information — set_locality","text":"","code":"df <- tibble::tibble(   scientificName = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\"),   countryCode = c(\"AU\", \"AU\", \"AU\"),   state = c(\"New South Wales\", \"New South Wales\", \"New South Wales\"),   locality = c(\"Melville Caves\", \"Melville Caves\", \"Bryans Swamp about 3km away\") )  # Reformat columns to Darwin Core Standard terms df |>   set_locality(     countryCode = countryCode,     stateProvince = state,     locality = locality   ) #> ⠙ Checking 3 columns: countryCode, locality, and stateProvince #> ✔ Checking 3 columns: countryCode, locality, and stateProvince [918ms] #>  #> # A tibble: 3 × 7 #>   scientificName latitude longitude eventDate countryCode locality stateProvince #>   <chr>             <dbl>     <dbl> <chr>     <chr>       <chr>    <chr>         #> 1 Crinia Signif…    -35.3      149. 2010-10-… AU          Melvill… New South Wa… #> 2 Crinia Signif…    -35.2      149. 2010-10-… AU          Melvill… New South Wa… #> 3 Litoria peron…    -35.8      149. 2010-10-… AU          Bryans … New South Wa…  # Columns with valid Darwin Core terms as names are automatically detected # and checked. This will do the same as above. df |>   set_locality(     stateProvince = state   ) #> ⠙ Checking 3 columns: countryCode, locality, and stateProvince #> ✔ Checking 3 columns: countryCode, locality, and stateProvince [918ms] #>  #> # A tibble: 3 × 7 #>   scientificName latitude longitude eventDate countryCode locality stateProvince #>   <chr>             <dbl>     <dbl> <chr>     <chr>       <chr>    <chr>         #> 1 Crinia Signif…    -35.3      149. 2010-10-… AU          Melvill… New South Wa… #> 2 Crinia Signif…    -35.2      149. 2010-10-… AU          Melvill… New South Wa… #> 3 Litoria peron…    -35.8      149. 2010-10-… AU          Bryans … New South Wa…"},{"path":"https://corella.ala.org.au/reference/set_measurements.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert columns with measurement data for an individual or event to Darwin Core standard — set_measurements","title":"Convert columns with measurement data for an individual or event to Darwin Core standard — set_measurements","text":"function work progress, used caution. raw collected data, many types information can captured one column. example, column name LMA_g.m2 contains measured trait (Leaf Mass per Area, LMA) unit measurement (grams per meter squared, g/m2), recorded column values . Darwin Core, different types information must separated multiple columns can ingested correctly aggregated sources data accurately. function converts information preserved single measurement column multiple columns (measurementID, measurementUnit, measurementType) per Darwin Core standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_measurements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert columns with measurement data for an individual or event to Darwin Core standard — set_measurements","text":"","code":"set_measurements(.df, cols = NULL, unit = NULL, type = NULL, .keep = \"unused\")"},{"path":"https://corella.ala.org.au/reference/set_measurements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert columns with measurement data for an individual or event to Darwin Core standard — set_measurements","text":".df data.frame tibble column appended . cols vector column names included 'measurements'. Unquoted. unit vector strings giving units variable type vector strings giving description variable .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_measurements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert columns with measurement data for an individual or event to Darwin Core standard — set_measurements","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/set_measurements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert columns with measurement data for an individual or event to Darwin Core standard — set_measurements","text":"Columns nested single column measurementOrFact contains Darwin Core Standard measurement fields. nesting three measurement columns within measurementOrFact column, nested measurement columns can converted long format (one row per measurement, per occurrence) original data frame remains organised one row per occurrence. Data can unnested long format using tidyr::unnest().","code":""},{"path":"https://corella.ala.org.au/reference/set_measurements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert columns with measurement data for an individual or event to Darwin Core standard — set_measurements","text":"","code":"# \\donttest{ library(tidyr)  # Example data of plant species observations and measurements df <- tibble::tibble(   Site = c(\"Adelaide River\", \"Adelaide River\", \"AgnesBanks\"),   Species = c(\"Corymbia latifolia\", \"Banksia aemula\", \"Acacia aneura\"),   Latitude = c(-13.04, -13.04, -33.60),   Longitude = c(131.07, 131.07, 150.72),   LMA_g.m2 = c(NA, 180.07, 159.01),   LeafN_area_g.m2 = c(1.100, 0.913, 2.960) )  # Reformat columns to Darwin Core Standard # Measurement columns are reformatted and nested in column `measurementOrFact` df_dwc <- df |>   set_measurements(     cols = c(LMA_g.m2,              LeafN_area_g.m2),     unit = c(\"g/m2\",              \"g/m2\"),     type = c(\"leaf mass per area\",              \"leaf nitrogen per area\")   ) #> ℹ Adding measurement columns #> ✔ Adding measurement columns [21ms] #>  #> ℹ Converting measurements to Darwin Core #> ✔ Converting measurements to Darwin Core [22ms] #>  #> ⠙ Checking 4 columns: measurementValue, measurementID, measurementUnit, and mea… #> ⠹ Checking 4 columns: measurementValue, measurementID, measurementUnit, and mea… #> ✔ Checking 4 columns: measurementValue, measurementID, measurementUnit, and mea… #>  #> ℹ Successfully nested measurement columns in column measurementOrFact. #> ✔ Successfully nested measurement columns in column measurementOrFact. [117ms] #>   df_dwc #> # A tibble: 3 × 5 #>   Site           Species            Latitude Longitude measurementOrFact #>   <chr>          <chr>                 <dbl>     <dbl> <list>            #> 1 Adelaide River Corymbia latifolia    -13.0      131. <tibble [2 × 4]>  #> 2 Adelaide River Banksia aemula        -13.0      131. <tibble [2 × 4]>  #> 3 AgnesBanks     Acacia aneura         -33.6      151. <tibble [2 × 4]>   # Unnest to view full long format data frame df_dwc |>   tidyr::unnest(measurementOrFact) #> # A tibble: 6 × 8 #>   Site           Species       Latitude Longitude measurementValue measurementID #>   <chr>          <chr>            <dbl>     <dbl>            <dbl> <chr>         #> 1 Adelaide River Corymbia lat…    -13.0      131.           NA     LMA_g.m2|1    #> 2 Adelaide River Corymbia lat…    -13.0      131.            1.1   LeafN_area_g… #> 3 Adelaide River Banksia aemu…    -13.0      131.          180.    LMA_g.m2|2    #> 4 Adelaide River Banksia aemu…    -13.0      131.            0.913 LeafN_area_g… #> 5 AgnesBanks     Acacia aneura    -33.6      151.          159.    LMA_g.m2|3    #> 6 AgnesBanks     Acacia aneura    -33.6      151.            2.96  LeafN_area_g… #> # ℹ 2 more variables: measurementUnit <chr>, measurementType <chr>  # }"},{"path":"https://corella.ala.org.au/reference/set_observer.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with information of who made an observation — set_observer","title":"Set, create or modify columns with information of who made an observation — set_observer","text":"Format fields contain information made specific observation organism tibble using Darwin Core Standard. practice different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_observer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with information of who made an observation — set_observer","text":"","code":"set_observer(.df, recordedBy = NULL, recordedByID = NULL, .keep = \"unused\")"},{"path":"https://corella.ala.org.au/reference/set_observer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with information of who made an observation — set_observer","text":".df data.frame tibble column appended . recordedBy Names people, groups, organizations responsible recording original occurrence. primary collector observer listed first. recordedByID globally unique identifier person, people, groups, organizations responsible recording original occurrence. .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_observer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with information of who made an observation — set_observer","text":"tibble requested fields added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_observer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with information of who made an observation — set_observer","text":"Examples recordedBy values: José E. Crespo Examples recordedByID values: c(\"https://orcid.org/0000-0002-1825-0097\", \"https://orcid.org/0000-0002-1825-0098\")","code":""},{"path":"https://corella.ala.org.au/reference/set_observer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with information of who made an observation — set_observer","text":"","code":"df <- tibble::tibble(   name = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\"),   observer = c(\"David Attenborough\", \"David Attenborough\", \"David Attenborough\")   )  # Reformat columns to Darwin Core terms df |>   set_observer(     recordedBy = observer     ) #> ⠙ Checking 1 column: recordedBy #> ✔ Checking 1 column: recordedBy [310ms] #>  #> # A tibble: 3 × 5 #>   name             latitude longitude eventDate  recordedBy         #>   <chr>               <dbl>     <dbl> <chr>      <chr>              #> 1 Crinia Signifera    -35.3      149. 2010-10-14 David Attenborough #> 2 Crinia Signifera    -35.2      149. 2010-10-14 David Attenborough #> 3 Litoria peronii     -35.8      149. 2010-10-14 David Attenborough"},{"path":"https://corella.ala.org.au/reference/set_occurrences.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with occurrence-specific information — set_occurrences","title":"Set, create or modify columns with occurrence-specific information — set_occurrences","text":"Format fields uniquely identify occurrence record specify type record. occurrenceID basisOfRecord necessary fields information occurrence records, appended data set conform Darwin Core Standard prior submission. practice different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_occurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with occurrence-specific information — set_occurrences","text":"","code":"set_occurrences(   .df,   occurrenceID = NULL,   basisOfRecord = NULL,   occurrenceStatus = NULL,   .keep = \"unused\",   .keep_composite = \"all\",   .messages = TRUE )"},{"path":"https://corella.ala.org.au/reference/set_occurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with occurrence-specific information — set_occurrences","text":".df data.frame tibble column appended . occurrenceID character string. Every occurrence occurrenceID entry. Ideally IDs persistent avoid lost future updates. also unique, within dataset, (ideally) across datasets. basisOfRecord Record type. accepts camelCase, consistency field names. Accepted basisOfRecord values one : \"humanObservation\", \"machineObservation\", \"livingSpecimen\", \"preservedSpecimen\", \"fossilSpecimen\", \"materialCitation\" occurrenceStatus Either \"present\" \"absent\". .keep Control columns .df retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate . .keep_composite Control columns .df kept composite_id() used assign values occurrenceID, defaulting \"\". different default .keep composite identifiers often contain information valuable contexts, meaning deleting columns default typically unwise. .messages Logical: progress message shown? Defaults TRUE.","code":""},{"path":"https://corella.ala.org.au/reference/set_occurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with occurrence-specific information — set_occurrences","text":"tibble requested columns added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_occurrences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with occurrence-specific information — set_occurrences","text":"Examples occurrenceID values: 000866d2-c177-4648-a200-ead4007051b9 http://arctos.database.museum/guid/MSB:Mamm:233627 Accepted basisOfRecord values one : \"humanObservation\", \"machineObservation\", \"livingSpecimen\", \"preservedSpecimen\", \"fossilSpecimen\", \"materialCitation\"","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/set_occurrences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with occurrence-specific information — set_occurrences","text":"","code":"df <- tibble::tibble(   scientificName = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\")   )  # Add occurrence information df |>   set_occurrences(     occurrenceID = composite_id(random_id(), eventDate), # add composite ID     basisOfRecord = \"humanObservation\"     ) #> ⠙ Checking 2 columns: occurrenceID and basisOfRecord #> ✔ Checking 2 columns: occurrenceID and basisOfRecord [617ms] #>  #> # A tibble: 3 × 6 #>   scientificName   latitude longitude eventDate  occurrenceID      basisOfRecord #>   <chr>               <dbl>     <dbl> <chr>      <chr>             <chr>         #> 1 Crinia Signifera    -35.3      149. 2010-10-14 85bdd116-0853-11… humanObserva… #> 2 Crinia Signifera    -35.2      149. 2010-10-14 85bdd120-0853-11… humanObserva… #> 3 Litoria peronii     -35.8      149. 2010-10-14 85bdd12a-0853-11… humanObserva…"},{"path":"https://corella.ala.org.au/reference/set_scientific_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with scientific name & authorship information — set_scientific_name","title":"Set, create or modify columns with scientific name & authorship information — set_scientific_name","text":"Format field scientificName, lowest identified taxonomic name occurrence, along rank authorship provided name tibble using Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_scientific_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with scientific name & authorship information — set_scientific_name","text":"","code":"set_scientific_name(   .df,   scientificName = NULL,   scientificNameAuthorship = NULL,   taxonRank = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/set_scientific_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with scientific name & authorship information — set_scientific_name","text":".df data.frame tibble column appended . scientificName full scientific name lower level taxonomic rank can determined. scientificNameAuthorship authorship information scientificName. taxonRank taxonomic rank scientificName. .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_scientific_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with scientific name & authorship information — set_scientific_name","text":"tibble requested columns added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_scientific_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with scientific name & authorship information — set_scientific_name","text":"practice function used differently mutate(), gives users informative errors, serves useful lookup accepted column names Darwin Core Standard. Examples scientificName values (specify rank parentheses, users include information): Coleoptera (order) Vespertilionidae (family) Manis (genus) Ctenomys sociabilis (genus + specificEpithet) Ambystoma tigrinum diaboli (genus + specificEpithet + infraspecificEpithet) Examples scientificNameAuthorship: (Györfi, 1952) R. . Graham (Martinovský) Tzvelev Examples taxonRank: order genus subspecies infraspecies","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/set_scientific_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with scientific name & authorship information — set_scientific_name","text":"","code":"df <- tibble::tibble(   name = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\")   )  # Reformat columns to Darwin Core Standard terms df |>   set_scientific_name(     scientificName = name     ) #> ⠙ Checking 1 column: scientificName #> ⠹ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [316ms] #>  #> # A tibble: 3 × 4 #>   latitude longitude eventDate  scientificName   #>      <dbl>     <dbl> <chr>      <chr>            #> 1    -35.3      149. 2010-10-14 Crinia Signifera #> 2    -35.2      149. 2010-10-14 Crinia Signifera #> 3    -35.8      149. 2010-10-14 Litoria peronii"},{"path":"https://corella.ala.org.au/reference/set_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, create or modify columns with taxonomic information — set_taxonomy","title":"Set, create or modify columns with taxonomic information — set_taxonomy","text":"Format fields contain taxonomic name information kingdom species, well common/vernacular name, tibble using Darwin Core Standard. practice different using mutate(), gives informative errors, serves useful lookup accepted column names Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/set_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, create or modify columns with taxonomic information — set_taxonomy","text":"","code":"set_taxonomy(   .df,   kingdom = NULL,   phylum = NULL,   class = NULL,   order = NULL,   family = NULL,   genus = NULL,   specificEpithet = NULL,   vernacularName = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/set_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, create or modify columns with taxonomic information — set_taxonomy","text":".df data.frame tibble column appended . kingdom kingdom name identified taxon. phylum phylum name identified taxon. class class name identified taxon. order order name identified taxon. family family name identified taxon. genus genus name identified taxon. specificEpithet name first species species epithet scientificName. See documentation vernacularName common vernacular name identified taxon. .keep Control columns .data retained output. Note unlike dplyr::mutate(), defaults \"\" defaults \"unused\"; .e. keeps Darwin Core columns, columns used generate .","code":""},{"path":"https://corella.ala.org.au/reference/set_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, create or modify columns with taxonomic information — set_taxonomy","text":"tibble requested columns added/reformatted.","code":""},{"path":"https://corella.ala.org.au/reference/set_taxonomy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set, create or modify columns with taxonomic information — set_taxonomy","text":"Examples specificEphithet: scientificName Abies concolor, specificEpithet concolor. scientificName Semisulcospira gottschei, specificEpithet gottschei.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/set_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, create or modify columns with taxonomic information — set_taxonomy","text":"","code":"df <- tibble::tibble(   scientificName = c(\"Crinia Signifera\", \"Crinia Signifera\", \"Litoria peronii\"),   fam = c(\"Myobatrachidae\", \"Myobatrachidae\", \"Hylidae\"),   ord = c(\"Anura\", \"Anura\", \"Anura\"),   latitude = c(-35.27, -35.24, -35.83),   longitude = c(149.33, 149.34, 149.34),   eventDate = c(\"2010-10-14\", \"2010-10-14\", \"2010-10-14\")   )  # Reformat columns to Darwin Core terms df |>   set_scientific_name(     scientificName = scientificName     ) |>   set_taxonomy(     family = fam,     order = ord     ) #> ⠙ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [310ms] #>  #> ⠙ Checking 2 columns: family and order #> Error in c(\"(function (e) \", \"{\"): ! Error in a deferred `on.exit()` clause #> Caused by error in `cli_progress_done(id = id, .envir = .envir, result = \"auto\")`: #> ! reached CPU time limit"},{"path":"https://corella.ala.org.au/reference/suggest_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest a workflow to make data comply with Darwin Core Standard — suggest_workflow","title":"Suggest a workflow to make data comply with Darwin Core Standard — suggest_workflow","text":"Checks whether data.frame tibble conforms Darwin Core Standard suggests standardise data frame standardised minimum Darwin Core requirements. intended users' go-function figuring get started standardising data. Output provides summary users column names match valid Darwin Core terms, minimum required column names/terms (ones missing), suggested workflow add missing terms.","code":""},{"path":"https://corella.ala.org.au/reference/suggest_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest a workflow to make data comply with Darwin Core Standard — suggest_workflow","text":"","code":"suggest_workflow(.df)"},{"path":"https://corella.ala.org.au/reference/suggest_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest a workflow to make data comply with Darwin Core Standard — suggest_workflow","text":".df data.frame/tibble checks run","code":""},{"path":"https://corella.ala.org.au/reference/suggest_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest a workflow to make data comply with Darwin Core Standard — suggest_workflow","text":"Invisibly returns input data.frame/tibble, primarily called side-effect running check functions input.","code":""},{"path":"https://corella.ala.org.au/reference/suggest_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suggest a workflow to make data comply with Darwin Core Standard — suggest_workflow","text":"","code":"df <- tibble::tibble(   scientificName = c(\"Callocephalon fimbriatum\", \"Eolophus roseicapilla\"),   latitude = c(-35.310, \"-35.273\"), # deliberate error for demonstration purposes   longitude = c(149.125, 149.133),   eventDate = c(\"14-01-2023\", \"15-01-2023\"),   status = c(\"present\", \"present\") )  # Summarise whether your data conforms to Darwin Core Standard. # See a suggested workflow to amend or add missing information. df |>   suggest_workflow() #>  #> ⠙ Checking 2 columns: family and order #> ── Matching Darwin Core terms ────────────────────────────────────────────────── #> ⠙ Checking 2 columns: family and order #>  #> Matched 2 of 5 column names to DwC terms: #> ⠙ Checking 2 columns: family and order #>  #> ✔ Matched: eventDate scientificName #> ⠙ Checking 2 columns: family and order #> ✖ Unmatched: latitude, longitude, status #> ⠙ Checking 2 columns: family and order #>  #> ⠙ Checking 2 columns: family and order #> ── Minimum required Darwin Core terms ────────────────────────────────────────── #> ⠙ Checking 2 columns: family and order #>  #>   Type                      Matched term(s)  Missing term(s)                                                                 #> ✔ Scientific name           scientificName   -                                                                                #> ✔ Date/Time                 eventDate        -                                                                                #> ✖ Identifier (at least one) -                occurrenceID, catalogNumber, recordNumber                                        #> ✖ Record type               -                basisOfRecord                                                                    #> ✖ Location                  -                decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters  #>  #>  #> ⠙ Checking 2 columns: family and order #> ── Suggested workflow ────────────────────────────────────────────────────────── #> ⠙ Checking 2 columns: family and order #>  #> To make your data Darwin Core compliant, use the following workflow: #>  #> df |> #> ⠙ Checking 2 columns: family and order #>   set_occurrences() |>  #> ⠙ Checking 2 columns: family and order #>   set_coordinates() #> ⠙ Checking 2 columns: family and order #>  #> ⠙ Checking 2 columns: family and order #> ── Additional functions  #> ⠙ Checking 2 columns: family and order #> ℹ See all `set_` functions at #>   http://corella.ala.org.au/reference/index.html#add-rename-or-edit-columns-to-match-darwin-core-terms #> ⠙ Checking 2 columns: family and order"},{"path":"https://corella.ala.org.au/news/index.html","id":"corella-014","dir":"Changelog","previous_headings":"","what":"corella 0.1.4","title":"corella 0.1.4","text":"Initial release corella. Patch versions advanced 0.1.1 0.1.4 CRAN resubmission purposes, fixing following issues: Add correct package name formatting minor updates DESCRIPTION. Fix CPU limit error set_measurements() Added \\donttest examples Added test check_dataset()","code":""}]
