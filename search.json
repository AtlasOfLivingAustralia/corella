[{"path":"https://corella.ala.org.au/articles/checking-your-dataset.html","id":"checking-individual-terms","dir":"Articles","previous_headings":"","what":"Checking individual terms","title":"Checking your dataset","text":"corella consists many internal check_ functions. one runs basic validation checks specified column ensure data conforms Darwin Core term’s expected data type. example, small dataset two observations galahs (Eolophus roseicapilla) (class character), latitude longitude coordinates (class numeric), location description column place (class character). can use function use_coordinates() specify columns refer valid Darwin Core terms decimalLatitude decimalLongitude. intentionally added wrong column place decimalLatitude. corella return error decimalLatitude decimalLatitude fields must numeric Darwin Core standard. error comes small internal checking function called check_decimalLatitude().","code":"library(corella) library(tibble)  df <- tibble::tibble(   name = c(\"Eolophus roseicapilla\", \"Eolophus roseicapilla\"),   latitude = c(-35.310, -35.273),   longitude = c(149.125, 149.133),   place = c(\"a big tree\", \"an open field\") )  df ## # A tibble: 2 × 4 ##   name                  latitude longitude place         ##   <chr>                    <dbl>     <dbl> <chr>         ## 1 Eolophus roseicapilla    -35.3      149. a big tree    ## 2 Eolophus roseicapilla    -35.3      149. an open field df |>   use_coordinates(decimalLatitude = place, # wrong column                   decimalLongitude = longitude) ## ⠙ Checking 2 columns: decimalLatitude and decimalLongitude ## ✔ Checking 2 columns: decimalLatitude and decimalLongitude [645ms] ## ## Error in `check_decimalLatitude()`: ## ! decimalLatitude must be a numeric vector, not character."},{"path":"https://corella.ala.org.au/articles/checking-your-dataset.html","id":"supported-terms","dir":"Articles","previous_headings":"Checking individual terms","what":"Supported terms","title":"Checking your dataset","text":"corella contains internal check_ functions individual Darwin Core terms supported. follows:  user specifies column matching Darwin Core term (column/term detected corella automatically) use_ function, use_ function triggers matching term’s check_ function. process ensures data correctly formatted prior saved Darwin Core Archive. ’s useful know internal, individual check_ functions exist building blocks full suite checks, users can run check_dataset().","code":""},{"path":"https://corella.ala.org.au/articles/checking-your-dataset.html","id":"checking-a-full-dataset","dir":"Articles","previous_headings":"","what":"Checking a full dataset","title":"Checking your dataset","text":"users familiar Darwin Core standards, datasets already conform Darwin Core standards (close), might convenient run many checks one time. Users can use check_dataset() function run “test suite” dataset. check_dataset() detects columns match valid Darwin Core terms, runs matching check_ functions , interactively, much like devtools::test() devtools::check(). output check_dataset() returns: * summary table whether matching column’s check passed failed * number errors passed columns * Whether data meets minimum Darwin Core requirements * first 5 error messages returned checks Note check_dataset() currently accepts occurrence-level datasets. Datasets hierarchical events data (eg multiple repeated Surveys, Site Locations) currently supported.","code":"df <- tibble::tibble(   decimalLatitude = c(-35.310, \"-35.273\"), # deliberate error for demonstration purposes   decimalLongitude = c(149.125, 149.133),   date = c(\"14-01-2023\", \"15-01-2023\"),   individualCount = c(0, 2),   scientificName = c(\"Callocephalon fimbriatum\", \"Eolophus roseicapilla\"),   country = c(\"AU\", \"AU\"),   occurrenceStatus = c(\"present\", \"present\")   )  df |>   check_dataset() ## ℹ Testing data ## ✔ | E P | Column ## ⠙ | 0  decimalLatitude ## ✔ | 3 ✖ | decimalLatitude   [53ms] ## ## ⠙ | 0  decimalLongitude ## ✔ | 0 ✔ | decimalLongitude  [10ms] ## ## ⠙ | 0  individualCount ## ✔ | 1 ✖ | individualCount   [31ms] ## ## ⠙ | 0  scientificName ## ✔ | 0 ✔ | scientificName    [14ms] ## ## ⠙ | 0  country ## ✔ | 1 ✖ | country           [26ms] ## ## ══ Results ═════════════════════════════════════════════════════════════════════ ##  ## [ Errors: 5 | Pass: 2 ] ##  ## ✖ Data meets minimum Darwin Core requirements ## ℹ Use `suggest_workflow()` to see more information. ## ── Error in decimalLatitude ──────────────────────────────────────────────────── ##  ## decimalLatitude must be a numeric vector, not character. ## decimalLatitude must be a numeric vector, not character. ## Value is outside of expected range in decimalLatitude. ## ℹ Column contains values outside of -90 <= x <= 90. ## ── Error in individualCount ──────────────────────────────────────────────────── ##  ## individualCount values do not match occurrenceStatus. ## ✖ Found 1 row where individualCount = 0 but occurrenceStatus = \"present\". ## ── Error in country ──────────────────────────────────────────────────────────── ##  ## Unexpected value in country. ## ✖ Invalid value: \"AU\""},{"path":"https://corella.ala.org.au/articles/checking-your-dataset.html","id":"users-have-options","dir":"Articles","previous_headings":"","what":"Users have options","title":"Checking your dataset","text":"corella offers two options checking dataset, detailed : Running individual checks use_ functions, running “test suite” check_dataset(). hope alternative options provide users different options workflow, allowing choose favourite method switch methods standardise data.","code":""},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"Quick start guide","text":"install CRAN: install development version GitHub: load package:","code":"install.packages(\"corella\") # install.packages(\"devtools\") devtools::install_github(\"AtlasOfLivingAustralia/corella\") library(corella)"},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"rename-add-or-edit-columns","dir":"Articles","previous_headings":"","what":"Rename, add or edit columns","title":"Quick start guide","text":"minimal example dataset [species] observations. dataframe df columns contain information like standardised using Darwin Core. can standardise data use_ functions. functions prefix use_, suffix named suggest type data used standardise. example, use_coordinates use_datetime. argument names use_ functions valid Darwin Core terms. hope grouping Darwin Core terms groups based data type, corella makes easier users know Darwin Core terms use column names (one confusing parts Darwin Core). Let’s specify scientific name (.e. genus & species name) data species column using use_scientific_name() update dataframe. ’ll notice 2 things happen: species column dataframe renamed scientificName. use_scientific_name() ran check species column make sure formatted correctly. happens add column error ? df, latitude column “accidentally” class character column, numeric column. try add using use_coordinates(), error tell us something wrong.","code":"library(tibble) library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union  df <- tibble(   latitude = c(-35.310, \"-35.273\"), # deliberate error for demonstration purposes   longitude = c(149.125, 149.133),   date = c(\"14-01-2023\", \"15-01-2023\"),   time = c(\"10:23:00\", \"11:25:00\"),   month = c(\"January\", \"February\"),   day = c(100, 101),   species = c(\"Callocephalon fimbriatum\", \"Eolophus roseicapilla\"),   n = c(2, 3),   crs = c(\"WGS84\", \"WGS8d\"),   country = c(\"Australia\", \"Denmark\"),   continent = c(\"Oceania\", \"Europe\")   ) df #> # A tibble: 2 × 11 #>   latitude longitude date       time     month   day species     n crs   country #>   <chr>        <dbl> <chr>      <chr>    <chr> <dbl> <chr>   <dbl> <chr> <chr>   #> 1 -35.31        149. 14-01-2023 10:23:00 Janu…   100 Calloc…     2 WGS84 Austra… #> 2 -35.273       149. 15-01-2023 11:25:00 Febr…   101 Eoloph…     3 WGS8d Denmark #> # ℹ 1 more variable: continent <chr> df |>   use_scientific_name(scientificName = species) #> ⠙ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [338ms] #>  #> # A tibble: 2 × 11 #>   latitude longitude date       time   month   day     n crs   country continent #>   <chr>        <dbl> <chr>      <chr>  <chr> <dbl> <dbl> <chr> <chr>   <chr>     #> 1 -35.31        149. 14-01-2023 10:23… Janu…   100     2 WGS84 Austra… Oceania   #> 2 -35.273       149. 15-01-2023 11:25… Febr…   101     3 WGS8d Denmark Europe    #> # ℹ 1 more variable: scientificName <chr> # is it possible to print this error? df |>   use_scientific_name(scientificName = species) |>   use_coordinates(decimalLongitude = longitude,                   decimalLatitude = latitude) #> ⠙ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [316ms] #>  #> ⠙ Checking 2 columns: decimalLatitude and decimalLongitude #> ⠹ Checking 2 columns: decimalLatitude and decimalLongitude #> ✔ Checking 2 columns: decimalLatitude and decimalLongitude [634ms] #>  #> Error in `check_decimalLatitude()`: #> ! decimalLatitude must be a numeric vector, not character."},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"fix-or-update-columns","dir":"Articles","previous_headings":"Rename, add or edit columns","what":"Fix or update columns","title":"Quick start guide","text":"fix column caused error? One way edit column within use_ function containing problematic column. use_ function essentially specialised mutate() function dplyr. means can edit columns using process use mutate(). Let’s fix latitude column class numeric, fix error.","code":"df |>   use_scientific_name(scientificName = species) |>   use_coordinates(decimalLongitude = longitude,                   decimalLatitude = as.numeric(latitude)) #> ⠙ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [316ms] #>  #> ⠙ Checking 2 columns: decimalLatitude and decimalLongitude #> ✔ Checking 2 columns: decimalLatitude and decimalLongitude [618ms] #>  #> # A tibble: 2 × 11 #>   date       time     month     day     n crs   country continent scientificName #>   <chr>      <chr>    <chr>   <dbl> <dbl> <chr> <chr>   <chr>     <chr>          #> 1 14-01-2023 10:23:00 January   100     2 WGS84 Austra… Oceania   Callocephalon… #> 2 15-01-2023 11:25:00 Februa…   101     3 WGS8d Denmark Europe    Eolophus rose… #> # ℹ 2 more variables: decimalLatitude <dbl>, decimalLongitude <dbl>"},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"auto-detect-columns","dir":"Articles","previous_headings":"Rename, add or edit columns","what":"Auto-detect columns","title":"Quick start guide","text":"corella also able detect columns already contain valid Darwin Core terms column names. example, df contains columns locality information. can add use_locality() pipe specify check columns. columns already valid Darwin Core terms column names (country continent). add use_locality() pipe without arguments, detect valid Darwin Core columns df check automatically. auto-detecting columns, corella prevents users specify every single column already named correctly dataset. functionality definitely help reduce workload datasets lots columns!","code":"df |>   use_scientific_name(scientificName = species) |>   use_coordinates(decimalLongitude = longitude,                   decimalLatitude = as.numeric(latitude)) |>   use_locality() #> ⠙ Checking 1 column: scientificName #> ✔ Checking 1 column: scientificName [311ms] #>  #> ⠙ Checking 2 columns: decimalLatitude and decimalLongitude #> ✔ Checking 2 columns: decimalLatitude and decimalLongitude [618ms] #>  #> ⠙ Checking 2 columns: country and continent #> ✔ Checking 2 columns: country and continent [618ms] #>  #> # A tibble: 2 × 11 #>   date       time     month     day     n crs   country continent scientificName #>   <chr>      <chr>    <chr>   <dbl> <dbl> <chr> <chr>   <chr>     <chr>          #> 1 14-01-2023 10:23:00 January   100     2 WGS84 Austra… Oceania   Callocephalon… #> 2 15-01-2023 11:25:00 Februa…   101     3 WGS8d Denmark Europe    Eolophus rose… #> # ℹ 2 more variables: decimalLatitude <dbl>, decimalLongitude <dbl>"},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"suggest-a-workflow","dir":"Articles","previous_headings":"","what":"Suggest a workflow","title":"Quick start guide","text":"Unsure start? Confused minimum requirements share data? Try using suggest_workflow(). suggest_workflow() provides high level summary designed show: column names match valid Darwin Core terms minimum requirements data shared, columns present dataframe. suggested workflow help add minimum required columns Additional functions add piped workflow (based column names dataset match Darwin Core terms) intention suggest_workflow() provide general help function whenever users feel uncertain next. Let’s see says original dataframe df. suggest_workflow() update suggested function pipe suggest functions necessary standardise data correctly. example, using one suggested functions use_occurrences(), run suggest_workflow() , output message longer suggests use_occurrences().","code":"df |>   suggest_workflow() #>  #> ── Matching Darwin Core terms ────────────────────────────────────────────────── #> Matched 4 of 11 column names to DwC terms: #> ✔ Matched: continent, country, day, month #> ✖ Unmatched: crs, date, latitude, longitude, n, species, time #>  #> ── Minimum required Darwin Core terms ────────────────────────────────────────── #>  #>   Type                      Matched term(s)  Missing term(s)                                                                 #> ✖ Identifier (at least one) -                occurrenceID, catalogNumber, recordNumber                                        #> ✖ Record type               -                basisOfRecord                                                                    #> ✖ Scientific name           -                scientificName                                                                   #> ✖ Location                  -                decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters  #> ✖ Date/Time                 -                eventDate #>  #> ── Suggested workflow ────────────────────────────────────────────────────────── #>  #> To make your data Darwin Core compliant, use the following workflow: #>  #> df |> #>   use_occurrences() |> #>   use_scientific_name() |> #>   use_coordinates() |> #>   use_datetime() #>  #> ── Additional functions #> Based on your matched terms, you can also add to your pipe: #> • `use_locality()` and `use_datetime()` #> ℹ See all `use_` functions at #>   <https://galaxias.ala.org.au/reference/index.html#add-darin-core-terms> df_edited <- df |>   use_occurrences(     occurrenceID = use_id_random(),     basisOfRecord = \"humanObservation\"     ) df_edited |>   suggest_workflow() #>  #> ── Matching Darwin Core terms ────────────────────────────────────────────────── #> Matched 6 of 13 column names to DwC terms: #> ✔ Matched: basisOfRecord, continent, country, day, month, occurrenceID #> ✖ Unmatched: crs, date, latitude, longitude, n, species, time #>  #> ── Minimum required Darwin Core terms ────────────────────────────────────────── #>  #>   Type                      Matched term(s)  Missing term(s)                                                                 #> ✔ Identifier (at least one) occurrenceID     -                                                                                #> ✔ Record type               basisOfRecord    -                                                                                #> ✖ Scientific name           -                scientificName                                                                   #> ✖ Location                  -                decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters  #> ✖ Date/Time                 -                eventDate #>  #> ── Suggested workflow ────────────────────────────────────────────────────────── #>  #> To make your data Darwin Core compliant, use the following workflow: #>  #> df |> #>   use_scientific_name() |> #>   use_coordinates() |> #>   use_datetime() #>  #> ── Additional functions #> Based on your matched terms, you can also add to your pipe: #> • `use_locality()` and `use_datetime()` #> ℹ See all `use_` functions at #>   <https://galaxias.ala.org.au/reference/index.html#add-darin-core-terms>"},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"test-your-data","dir":"Articles","previous_headings":"","what":"Test your data","title":"Quick start guide","text":"dataset already uses valid Darwin Core terms column names, instead working use_ function, might wish run tests entire dataset. run checks data like test suite, use check_dataset(). Much like devtools::test() devtools::check(), check_dataset() runs relevant check matching Darwin Core column returns summary results, along error messages returned checks.","code":"df <- tibble(   latitude = c(-35.310, \"-35.273\"), # deliberate error for demonstration purposes   longitude = c(149.125, 149.133),   date = c(\"14-01-2023\", \"15-01-2023\"),   individualCount = c(0, 2),   species = c(\"Callocephalon fimbriatum\", \"Eolophus roseicapilla\"),   country = c(\"AU\", \"AU\"),   occurrenceStatus = c(\"present\", \"present\")   )  df |>   check_dataset() #> ℹ Testing data #> ✔ | E P | Column #> ⠙ | 0  individualCount #> ✔ | 1 ✖ | individualCount  [31ms] #>  #> ⠙ | 0  country #> ✔ | 1 ✖ | country          [24ms] #>  #> ══ Results ═════════════════════════════════════════════════════════════════════ #>  #> [ Errors: 2 | Pass: 0 ] #>  #> ✖ Data meets minimum Darwin Core requirements #> ℹ Use `suggest_workflow()` to see more information. #> ── Error in individualCount ──────────────────────────────────────────────────── #>  #> individualCount values do not match occurrenceStatus. #> ✖ Found 1 row where individualCount = 0 but occurrenceStatus = \"present\". #> ── Error in country ──────────────────────────────────────────────────────────── #>  #> Unexpected value in country. #> ✖ Invalid value: \"AU\""},{"path":"https://corella.ala.org.au/articles/quick_start_guide.html","id":"use_measurements-a-work-in-progress","dir":"Articles","previous_headings":"","what":"use_measurements: a work in progress","title":"Quick start guide","text":"Let’s use small sample real dataset data Australian native plant species including Eucalypts Acacias. dataset contains lots measurement fields attached species occurrence contain data organism’s traits environment. extracted 3 examples: LMA_g.m2, LeafN_area_g.m2, PNUE. Darwin Core confusingly handles measurement fields. nests assigns correct columns. just specify column, unit, type measurement can unnest column, correct columns formatted correctly.","code":"library(tibble) library(readr) library(dplyr) library(tidyr) library(here)  # take a small sample df_filtered <- read_csv(here(\"inst\", \"examples\", \"data\", \"westerband_2022_wdate.csv\")) |>   select(Site, Species, Latitude, Longitude, LMA_g.m2, LeafN_area_g.m2, PNUE)  df_filtered #> # A tibble: 761 × 7 #>    Site           Species     Latitude Longitude LMA_g.m2 LeafN_area_g.m2   PNUE #>    <chr>          <chr>          <dbl>     <dbl>    <dbl>           <dbl>  <dbl> #>  1 Adelaide River Corymbia l…    -13.0      131.      NA            1.1   NA     #>  2 Adelaide River Eucalyptus…    -13.0      131.      NA            1.49  NA     #>  3 AgnesBanks     Banksia ae…    -33.6      151.     180.           0.913  4.93  #>  4 AgnesBanks     Eucalyptus…    -33.6      151.     199.           1.48   2.94  #>  5 AgnesBanks     Persoonia …    -33.6      151.     159.           0.700  4.45  #>  6 Alice Mulga    Acacia ane…    -22.4      133.      NA           NA     NA     #>  7 Alice Mulga    Acacia cam…    -22.4      133.      NA           NA     NA     #>  8 Alice Mulga    Acacia dic…    -22.4      133.     178.           2.97   0.345 #>  9 Alice Mulga    Acacia est…    -22.4      133.      NA           NA     NA     #> 10 Alice Mulga    Acacia kem…    -22.4      133.      NA           NA     NA     #> # ℹ 751 more rows df_nested <- df_filtered |>   slice(220:270) |>   use_measurements(cols = c(LMA_g.m2,                              LeafN_area_g.m2,                              PNUE),                    unit = c(\"g/m2\",                              \"g/m2\",                              \"co2/s\"),                    type = c(\"leaf mass per area\",                              \"leaf nitrogen per area\",                              \"photosynthetic nitrogen use efficiency\")                    )  df_nested |> slice(1:3) #> # A tibble: 3 × 5 #>   Site           Species                 Latitude Longitude measurementOrFact #>   <chr>          <chr>                      <dbl>     <dbl> <list>            #> 1 Downfall Creek Gossia hillii              -17.2      146. <tibble [3 × 4]>  #> 2 Downfall Creek Homalium circumpinnatum    -17.2      146. <tibble [3 × 4]>  #> 3 Downfall Creek Polyalthia nitidissima     -17.2      146. <tibble [3 × 4]> df_nested |>   unnest(measurementOrFact) #> # A tibble: 153 × 8 #>    Site           Species      Latitude Longitude measurementValue measurementID #>    <chr>          <chr>           <dbl>     <dbl>            <dbl> <chr>         #>  1 Downfall Creek Gossia hill…    -17.2      146.           156.   LMA_g.m2|1    #>  2 Downfall Creek Gossia hill…    -17.2      146.             1.54 LeafN_area_g… #>  3 Downfall Creek Gossia hill…    -17.2      146.             2.70 PNUE|1        #>  4 Downfall Creek Homalium ci…    -17.2      146.           116.   LMA_g.m2|2    #>  5 Downfall Creek Homalium ci…    -17.2      146.             1.73 LeafN_area_g… #>  6 Downfall Creek Homalium ci…    -17.2      146.             3.93 PNUE|2        #>  7 Downfall Creek Polyalthia …    -17.2      146.            99.9  LMA_g.m2|3    #>  8 Downfall Creek Polyalthia …    -17.2      146.             1.84 LeafN_area_g… #>  9 Downfall Creek Polyalthia …    -17.2      146.             2.27 PNUE|3        #> 10 Downfall Creek Pseudoweinm…    -17.2      146.           128.   LMA_g.m2|4    #> # ℹ 143 more rows #> # ℹ 2 more variables: measurementUnit <chr>, measurementType <chr>"},{"path":"https://corella.ala.org.au/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dax Kellie. Author, maintainer. Shandiya Balasubramanium. Author. Martin Westgate. Author.","code":""},{"path":"https://corella.ala.org.au/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kellie D, Balasubramanium S, Westgate M (2024). corella: Prepare, manipulate check data comply Darwin Core standards. R package version 0.1.0, https://corella.ala.org.au.","code":"@Manual{,   title = {corella: Prepare, manipulate and check data to comply with Darwin Core standards},   author = {Dax Kellie and Shandiya Balasubramanium and Martin Westgate},   year = {2024},   note = {R package version 0.1.0},   url = {https://corella.ala.org.au}, }"},{"path":[]},{"path":"https://corella.ala.org.au/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Prepare, manipulate and check data to comply with Darwin Core standards","text":"corella R package helps users standardize data using Darwin Core data standard, used biodiversity data like species occurrences. corella provides tools prepare, manipulate validate data standard’s criteria. standardized, data can subsequently shared Darwin Core Archive published open data infrastructures like Atlas Living Australia GBIF. corella built, maintained, Science & Decision Support Team Atlas Living Australia (ALA). named Little Corella (Cacatua sanguinea). comments, questions suggestions, please contact us.","code":""},{"path":"https://corella.ala.org.au/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prepare, manipulate and check data to comply with Darwin Core standards","text":"can install development version corella GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"AtlasOfLivingAustralia/corella\")"},{"path":"https://corella.ala.org.au/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Prepare, manipulate and check data to comply with Darwin Core standards","text":"small sample example data. ’d like convert data use Darwin Core standards. One important aspects Darwin Core standard using standard column names (Darwin Core terms). can update column names data match Darwin Core terms use_ functions. use_ function name corresponds type data, argument names correspond available Darwin Core terms use column names. use_ functions support data wrangling operations & dplyr::mutate() functionality, meaning columns can changed fixed pipe. use_ functions indicate anything needs fixing also automatically run checks column data make sure column correct format. sure start? Use suggest_workflow() know steps need make make data Darwin Core compliant. , data nearly ready want run checks columns match Darwin Core terms, run check_dataset(). check_dataset() checks columns valid Darwin Core terms column names.","code":"library(corella) library(tibble)  # A simple example of species occurrence data df <- tibble(   species = c(\"Callocephalon fimbriatum\", \"Eolophus roseicapilla\"),   latitude = c(-35.310, \"-35.273\"), # deliberate error for demonstration purposes   longitude = c(149.125, 149.133),   eventDate = c(\"14-01-2023\", \"15-01-2023\"),   status = c(\"present\", \"present\") )  df #> # A tibble: 2 × 5 #>   species                  latitude longitude eventDate  status  #>   <chr>                    <chr>        <dbl> <chr>      <chr>   #> 1 Callocephalon fimbriatum -35.31        149. 14-01-2023 present #> 2 Eolophus roseicapilla    -35.273       149. 15-01-2023 present suppressMessages( # for readability  df |>   use_coordinates(     decimalLatitude = as.numeric(latitude), # fix latitude     decimalLongitude = longitude     ) |>   use_scientific_name(     scientificName = species     ) |>   use_datetime(     eventDate = lubridate::dmy(eventDate) # specify date format     ) |>   use_occurrences(occurrenceStatus = status)  ) #> # A tibble: 2 × 5 #>   eventDate  decimalLatitude decimalLongitude scientificName    occurrenceStatus #>   <date>               <dbl>            <dbl> <chr>             <chr>            #> 1 2023-01-14           -35.3             149. Callocephalon fi… present          #> 2 2023-01-15           -35.3             149. Eolophus roseica… present df |>    suggest_workflow() #>  #> ── Matching Darwin Core terms ────────────────────────────────────────────────── #> Matched 1 of 5 column names to DwC terms: #> ✔ Matched: eventDate #> ✖ Unmatched: latitude, longitude, species, status #>  #> ── Minimum required Darwin Core terms ────────────────────────────────────────── #>  #>   Type                      Matched term(s)  Missing term(s)                                                                 #> ✔ Date/Time                 eventDate        -                                                                                #> ✖ Identifier (at least one) -                occurrenceID, catalogNumber, recordNumber                                        #> ✖ Record type               -                basisOfRecord                                                                    #> ✖ Scientific name           -                scientificName                                                                   #> ✖ Location                  -                decimalLatitude, decimalLongitude, geodeticDatum, coordinateUncertaintyInMeters #>  #> ── Suggested workflow ────────────────────────────────────────────────────────── #>  #> To make your data Darwin Core compliant, use the following workflow: #> df |> #>   use_occurrences() |> #>   use_scientific_name() |> #>   use_coordinates() #>  #> ── Additional functions #> ℹ See all `use_` functions at #>   <https://galaxias.ala.org.au/reference/index.html#add-darin-core-terms> df |>   check_dataset() #> ℹ Testing data #> ✔ | E P | Column #> ⠙ | 0 eventDate #> ✔ | 1 ✖ | eventDate  [62ms] #> ══ Results ═════════════════════════════════════════════════════════════════════ #>  #> [ Errors: 1 | Pass: 0 ] #>  #> ✖ Data meets minimum Darwin Core requirements #> ℹ Use `suggest_workflow()` to see more information. #> ── Error in eventDate ────────────────────────────────────────────────────────── #>  #> eventDate must be a Date vector, not a character. #> ℹ Specify date format with lubridate functions e.g. `ymd()`, `mdy()`, or #> `dmy()`."},{"path":"https://corella.ala.org.au/index.html","id":"citing-corella","dir":"","previous_headings":"","what":"Citing corella","title":"Prepare, manipulate and check data to comply with Darwin Core standards","text":"generate citation package version using, can run: current recommended citation : Kellie D, Balasubramaniam S & Westgate MJ (2024) corella: Tools standardize biodiversity data Darwin Core. R Package version 0.1.0.","code":"citation(package = \"corella\")"},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a dataset for Darwin Core conformance — check_dataset","title":"Check a dataset for Darwin Core conformance — check_dataset","text":"Function check whether data.frame tibble conforms Darwin Core standards. users want call suggest_workflow(), underlying check functions exported detailed work, debugging.","code":""},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a dataset for Darwin Core conformance — check_dataset","text":"","code":"check_dataset(.df)"},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a dataset for Darwin Core conformance — check_dataset","text":".df tibble checks run","code":""},{"path":"https://corella.ala.org.au/reference/check_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a dataset for Darwin Core conformance — check_dataset","text":"Invisibly returns input, primarily called side-effect running check functions input.","code":""},{"path":"https://corella.ala.org.au/reference/corella-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Build repositories to share biodiversity data — corella-package","title":"Build repositories to share biodiversity data — corella-package","text":"{corella} data preparation, editing checking data follow 'Darwin Core standards'; global data standard store, document, share biodiversity information. package provides tools manipulate data conform , check validity , Darwin Core standards. Using {corella} allow users verify data can used build 'Darwin Core Archives' using {galaxias} package package named genus Australian birds. logo image Little Corella (Cacatua sanguinea), drawn Dax Kellie.","code":""},{"path":"https://corella.ala.org.au/reference/corella-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Build repositories to share biodiversity data — corella-package","text":"Suggest start suggest_workflow() summary column names match Darwin Core terms data, workflow adding editing . Add Darwin Core Terms following functions add single DwC fields, collections related fields, existing tibble. use_coordinates() spatial data use_sf() spatial data sf format use_datetime() temporal data use_locality() spatial descriptions use_occurrences() basic information observations (occurrenceID, basisOfrecord, occurrenceStatus, recordID (?)) use_scientificName() record highest level taxonomic specificity dataset (scientificName, scientificNameRank, scientificNameAuthorship) use_taxonomy() specify higher taxonomic columns (kingdom, phylum, class, order, family, genus, species, specificEpithet, vernacularName) use_abundance() state many animals seen observation (individualCount, organismQuantity, organismQuantityType) use_individual_traits() attributes individuals measured (individualID, lifeStage, sex, vitality, reproductiveCondition) use_observer() specify made observation (recordedByID, recordedBy) use_collection() give museum- collection- specific information (datasetID, datasetName, catalogNumber) use_events() basic information observation events (eventID, parentEventID, eventType) use_measurements() 'Measurement Fact' data (optional rn) Proposed: use_darwin_core() subset fields DwC names (.e. df |> select(any_of(dwc_fields()))) use_media() good idea, unclear users supply said media; urls, ? Checking data Darwin Core compliance wrapper function checking tibbles Darwin Core compliance check_dataset(). calls internal check functions checking data columns matching Darwin Core terms. ** Add occurrence ID ** use_id_random() adds valid uuid column tibble","code":""},{"path":"https://corella.ala.org.au/reference/corella-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build repositories to share biodiversity data — corella-package","text":"questions, comments suggestions, please email support@ala.org.au.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/corella-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build repositories to share biodiversity data — corella-package","text":"Maintainer: Dax Kellie dax.kellie@csiro.au Authors: Shandiya Balasubramanium shandiya.balasubramanium@csiro.au Martin Westgate martin.westgate@csiro.au","code":""},{"path":"https://corella.ala.org.au/reference/suggest_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest workflow to make data compliant with Darwin Core — suggest_workflow","title":"Suggest workflow to make data compliant with Darwin Core — suggest_workflow","text":"Function check whether data.frame tibble conforms Darwin Core standards. users want call suggest_workflow(), underlying check functions exported detailed work, debugging.","code":""},{"path":"https://corella.ala.org.au/reference/suggest_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest workflow to make data compliant with Darwin Core — suggest_workflow","text":"","code":"suggest_workflow(.df)"},{"path":"https://corella.ala.org.au/reference/suggest_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest workflow to make data compliant with Darwin Core — suggest_workflow","text":".df tibble checks run","code":""},{"path":"https://corella.ala.org.au/reference/suggest_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest workflow to make data compliant with Darwin Core — suggest_workflow","text":"Invisibly returns input, primarily called side-effect running check functions input.","code":""},{"path":"https://corella.ala.org.au/reference/use_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Add abundance fields to a tibble — use_abundance","title":"Add abundance fields to a tibble — use_abundance","text":"field methods, common observe one individual per observation; observe abundance using non-integer measures mass area; seek individuals find (abundance zero). approaches use different DwC terms, function assists specifying abundances flexible way.","code":""},{"path":"https://corella.ala.org.au/reference/use_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add abundance fields to a tibble — use_abundance","text":"","code":"use_abundance(   .df,   individualCount = NULL,   organismQuantity = NULL,   organismQuantityType = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/use_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add abundance fields to a tibble — use_abundance","text":".df data.frame tibble column appended . individualCount number individuals present organismQuantity number enumeration value quantity organisms. Used together organismQuantityType provide context. organismQuantityType type quantification system used organismQuantity","code":""},{"path":"https://corella.ala.org.au/reference/use_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add abundance fields to a tibble — use_abundance","text":"tibble requested fields (see details).","code":""},{"path":"https://corella.ala.org.au/reference/use_abundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add abundance fields to a tibble — use_abundance","text":"Examples organismQuantity & organismQuantityType values: 27 (organismQuantity) individuals (organismQuantityType) 12.5 (organismQuantity) % biomass (organismQuantityType) r (organismQuantity) Braun-Blanquet Scale (organismQuantityType) many (organismQuantity) individuals (organismQuantityType)","code":""},{"path":"https://corella.ala.org.au/reference/use_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add abundance fields to a tibble — use_abundance","text":"","code":"df <- tibble::tibble(   species_name = c(\"Cacatua (Licmetis) tenuirostris\",                    \"Cacatua (Licmetis) tenuirostris\",                    \"Cacatua (Licmetis) tenuirostris\"),   n_obs = c(1, 3, 4)   )  df |>   use_abundance(individualCount = n_obs) #> ⠙ Checking 1 column: individualCount #> ✔ Checking 1 column: individualCount [319ms] #>  #> # A tibble: 3 × 2 #>   species_name                    individualCount #>   <chr>                                     <dbl> #> 1 Cacatua (Licmetis) tenuirostris               1 #> 2 Cacatua (Licmetis) tenuirostris               3 #> 3 Cacatua (Licmetis) tenuirostris               4"},{"path":"https://corella.ala.org.au/reference/use_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Add museum- or collection-specific information to a tibble — use_collection","title":"Add museum- or collection-specific information to a tibble — use_collection","text":"Format fields specify collection catalog number specimen occurrence record. practice different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/use_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add museum- or collection-specific information to a tibble — use_collection","text":"","code":"use_collection(   .df,   datasetID = NULL,   datasetName = NULL,   catalogNumber = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/use_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add museum- or collection-specific information to a tibble — use_collection","text":"datasetID identifier set data. May global unique identifier identifier specific collection institution. datasetName name identifying data set record derived. catalogNumber unique identifier record within data set collection. .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . df data.frame tibble column appended .","code":""},{"path":"https://corella.ala.org.au/reference/use_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add museum- or collection-specific information to a tibble — use_collection","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_collection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add museum- or collection-specific information to a tibble — use_collection","text":"Examples datasetID values: b15d4952-7d20-46f1-8a3e-556a512b04c5 Examples datasetName values: Grinnell Resurvey Mammals Lacey Ctenomys Recaptures Examples catalogNumber values: 145732 145732a 2008.1334 R-4313","code":""},{"path":"https://corella.ala.org.au/reference/use_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Add spatial fields to a tibble — use_coordinates","title":"Add spatial fields to a tibble — use_coordinates","text":"function helps format standard location fields tibble.","code":""},{"path":"https://corella.ala.org.au/reference/use_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add spatial fields to a tibble — use_coordinates","text":"","code":"use_coordinates(   .df,   decimalLatitude = NULL,   decimalLongitude = NULL,   geodeticDatum = NULL,   coordinateUncertaintyInMeters = NULL,   coordinatePrecision = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/use_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add spatial fields to a tibble — use_coordinates","text":"decimalLatitude latitude decimal degrees decimalLongitude longitude decimal degrees geodeticDatum datum spatial reference system coordinates recorded (usually \"WGS84\" \"EPSG:4326\"). often known Coordinate Reference System (CRS). coordinates GPS system, data already using WGS84. coordinateUncertaintyInMeters (numeric) Radius smallest circle contains whole location, given possible measurement error. coordinateUncertaintyInMeters typically around 30 (metres) recorded GPS 2000, 100 year. coordinatePrecision (numeric) precision decimalLatitude decimalLongitude supplied . coordinatePrecision less 0.00001 data collected using GPS. .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . df data.frame tibble column appended .","code":""},{"path":"https://corella.ala.org.au/reference/use_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add spatial fields to a tibble — use_coordinates","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_coordinates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add spatial fields to a tibble — use_coordinates","text":"practice different using mutate(), gives informative errors, serves useful lookup spatial fields represented Darwin Core Standard. Example values : geodeticDatum valid EPSG code","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/use_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Add date and time fields to a tibble — use_datetime","title":"Add date and time fields to a tibble — use_datetime","text":"function helps format standard date/time fields tibble.","code":""},{"path":"https://corella.ala.org.au/reference/use_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add date and time fields to a tibble — use_datetime","text":"","code":"use_datetime(   .df,   eventDate = NULL,   year = NULL,   month = NULL,   day = NULL,   eventTime = NULL,   .keep = \"unused\",   .messages = TRUE )"},{"path":"https://corella.ala.org.au/reference/use_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add date and time fields to a tibble — use_datetime","text":"eventDate date date + time observation/event occurred. year year observation/event. month month observation/event. day day observation/event. .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . df data.frame tibble column appended . time time observation/event.","code":""},{"path":"https://corella.ala.org.au/reference/use_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add date and time fields to a tibble — use_datetime","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_datetime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add date and time fields to a tibble — use_datetime","text":"practice different using mutate(), gives informative errors, serves useful lookup spatial fields represented Darwin Core Standard. Example values : eventDate class Date POSITct. suggest using lubridate package define define date format using functions like ymd(), mdy, dmy(), including date + time, ymd_hms(), ymd_hm(), ymd_h().","code":""},{"path":"https://corella.ala.org.au/reference/use_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a sampling, collection or image-capture Event to a tibble — use_events","title":"Add a sampling, collection or image-capture Event to a tibble — use_events","text":"Format fields contain information Event. \"Event\" Darwin Core standard refers action occurs place time. Examples include: specimen collecting event survey sampling event camera trap image capture marine trawl camera trap deployment event camera trap burst image event (many images one observation) practice different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/use_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a sampling, collection or image-capture Event to a tibble — use_events","text":"","code":"use_events(   .df,   eventID = NULL,   eventType = NULL,   parentEventID = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/use_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a sampling, collection or image-capture Event to a tibble — use_events","text":"eventID unique identifier individual Event. eventType type Event parentEventID parent event one Events sit within. .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . df data.frame tibble column appended .","code":""},{"path":"https://corella.ala.org.au/reference/use_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a sampling, collection or image-capture Event to a tibble — use_events","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a sampling, collection or image-capture Event to a tibble — use_events","text":"Event requires unique eventID eventType (can several types Events single dataset), along parentEventID specifies level current Event sits (e.g., individual location's survey event ID, one several survey locations specific day's set surveys ie parentEvent). Examples eventID values: INBO:VIS:Ev:00009375 Examples eventType values: Sample Observation Survey Site Visit Deployment See examples dwc.tdwg.org Examples parentEventID A1 (identify parent event nested samples, eventID - A1_1, A1_2)","code":""},{"path":"https://corella.ala.org.au/reference/use_id_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a random identifier column — use_id_random","title":"Create a random identifier column — use_id_random","text":"Uses uuid::UUIDgenerate() create random UUID code without possible shortfalls influenced R's internal random number generators (.e., set.seed).","code":""},{"path":"https://corella.ala.org.au/reference/use_id_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a random identifier column — use_id_random","text":"","code":"use_id_random(x)"},{"path":"https://corella.ala.org.au/reference/use_id_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a random identifier column — use_id_random","text":"x vector","code":""},{"path":"https://corella.ala.org.au/reference/use_individual_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Add information of individual organisms to a tibble — use_individual_traits","title":"Add information of individual organisms to a tibble — use_individual_traits","text":"Format fields contain measurements attributes individual organisms tibble. Fields include specify sex, life stage condition. Individuals can identified individualID data contains resampling. practice different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/use_individual_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add information of individual organisms to a tibble — use_individual_traits","text":"","code":"use_individual_traits(   .df,   individualID = NULL,   lifeStage = NULL,   sex = NULL,   vitality = NULL,   reproductiveCondition = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/use_individual_traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add information of individual organisms to a tibble — use_individual_traits","text":"individualID identifier individual named group individual organisms represented Occurrence. Meant accommodate resampling individual group monitoring purposes. May global unique identifier identifier specific data set. lifeStage age class life stage organism time occurrence. sex sex biological individual. vitality indication whether organism alive dead time collection observation. reproductiveCondition reproductive condition biological individual. .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . df data.frame tibble column appended .","code":""},{"path":"https://corella.ala.org.au/reference/use_individual_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add information of individual organisms to a tibble — use_individual_traits","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_individual_traits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add information of individual organisms to a tibble — use_individual_traits","text":"Examples lifeStage values: zygote larva adult seedling flowering Examples vitality values: alive dead uncertain Examples reproductiveCondition values: non-reproductive pregnant bloom fruit bearing","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/use_locality.html","id":null,"dir":"Reference","previous_headings":"","what":"Add locality data to a tibble — use_locality","title":"Add locality data to a tibble — use_locality","text":"Locality information refers description place, rather spatial coordinate.","code":""},{"path":"https://corella.ala.org.au/reference/use_locality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add locality data to a tibble — use_locality","text":"","code":"use_locality(   .df,   continent = NULL,   country = NULL,   countryCode = NULL,   stateProvince = NULL,   locality = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/use_locality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add locality data to a tibble — use_locality","text":"continent (string) Valid continent. See details. country Valid country name. See country_codes. countryCode Valid country code. See country_codes. stateProvince sub-national region. locality specific location, property address. .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . df data.frame tibble column appended .","code":""},{"path":"https://corella.ala.org.au/reference/use_locality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add locality data to a tibble — use_locality","text":"tibble requested fields.","code":""},{"path":"https://corella.ala.org.au/reference/use_locality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add locality data to a tibble — use_locality","text":"Example values : continent one \"Africa\", \"Antarctica\", \"Asia\", \"Europe\", \"North America\", \"Oceania\" \"South America\". countryCode supplied according ISO 3166-1 ALPHA-2 standard, per TDWG advice.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/use_measurements.html","id":null,"dir":"Reference","previous_headings":"","what":"Add measurement data for an individual or event to a tibble — use_measurements","title":"Add measurement data for an individual or event to a tibble — use_measurements","text":"test","code":""},{"path":"https://corella.ala.org.au/reference/use_measurements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add measurement data for an individual or event to a tibble — use_measurements","text":"","code":"use_measurements(.df, cols = NULL, type = NULL, unit = NULL, .keep = \"unused\")"},{"path":"https://corella.ala.org.au/reference/use_measurements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add measurement data for an individual or event to a tibble — use_measurements","text":".df data.frame tibble column appended . .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate .","code":""},{"path":"https://corella.ala.org.au/reference/use_measurements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add measurement data for an individual or event to a tibble — use_measurements","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_measurements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add measurement data for an individual or event to a tibble — use_measurements","text":"add examples","code":""},{"path":"https://corella.ala.org.au/reference/use_observer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add who made an observation to a tibble — use_observer","title":"Add who made an observation to a tibble — use_observer","text":"Format fields contain information made specific observation organism.","code":""},{"path":"https://corella.ala.org.au/reference/use_observer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add who made an observation to a tibble — use_observer","text":"","code":"use_observer(.df, recordedBy = NULL, recordedByID = NULL, .keep = \"unused\")"},{"path":"https://corella.ala.org.au/reference/use_observer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add who made an observation to a tibble — use_observer","text":"recordedBy Names people, groups, organizations responsible recording original occurrence. primary collector observer listed first. recordedByID globally unique identifier person, people, groups, organizations responsible recording original occurrence. .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . df data.frame tibble column appended .","code":""},{"path":"https://corella.ala.org.au/reference/use_observer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add who made an observation to a tibble — use_observer","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_observer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add who made an observation to a tibble — use_observer","text":"practice different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard. Examples recordedBy values: José E. Crespo Examples recordedByID values: c(\"https://orcid.org/0000-0002-1825-0097\", \"https://orcid.org/0000-0002-1825-0098\")","code":""},{"path":"https://corella.ala.org.au/reference/use_occurrences.html","id":null,"dir":"Reference","previous_headings":"","what":"Add occurrence-specific information to a tibble — use_occurrences","title":"Add occurrence-specific information to a tibble — use_occurrences","text":"Format fields uniquely identify occurrence record specify type record. occurrenceID basisOfRecord necessary fields information occurrence records, appended data set conform Darwin Core Standard prior submission. practice different using mutate(), gives informative errors, serves useful lookup fields Darwin Core Standard.","code":""},{"path":"https://corella.ala.org.au/reference/use_occurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add occurrence-specific information to a tibble — use_occurrences","text":"","code":"use_occurrences(   .df,   occurrenceID = NULL,   basisOfRecord = NULL,   occurrenceStatus = NULL,   .keep = \"unused\",   .messages = TRUE )"},{"path":"https://corella.ala.org.au/reference/use_occurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add occurrence-specific information to a tibble — use_occurrences","text":"occurrenceID character string. Every occurrence occurrenceID entry. Ideally IDs persistent avoid lost future updates. also unique, within dataset, (ideally) across datasets. basisOfRecord Record type. accepts camelCase, consistency field names. Accepted basisOfRecord values one : \"humanObservation\", \"machineObservation\", \"livingSpecimen\", \"preservedSpecimen\", \"fossilSpecimen\", \"materialCitation\" .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\", keeps Darwin Core fields fields used generate . df data.frame tibble column appended .","code":""},{"path":"https://corella.ala.org.au/reference/use_occurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add occurrence-specific information to a tibble — use_occurrences","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_occurrences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add occurrence-specific information to a tibble — use_occurrences","text":"Examples occurrenceID values: 000866d2-c177-4648-a200-ead4007051b9 http://arctos.database.museum/guid/MSB:Mamm:233627 Accepted basisOfRecord values one : \"humanObservation\", \"machineObservation\", \"livingSpecimen\", \"preservedSpecimen\", \"fossilSpecimen\", \"materialCitation\"","code":""},{"path":"https://corella.ala.org.au/reference/use_scientific_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Add scientific name and authorship to a tibble — use_scientific_name","title":"Add scientific name and authorship to a tibble — use_scientific_name","text":"Format field scientificName, lowest identified taxonomic name occurrence, along rank authorship provided name.","code":""},{"path":"https://corella.ala.org.au/reference/use_scientific_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add scientific name and authorship to a tibble — use_scientific_name","text":"","code":"use_scientific_name(   .df,   scientificName = NULL,   scientificNameRank = NULL,   scientificNameAuthorship = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/use_scientific_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add scientific name and authorship to a tibble — use_scientific_name","text":"scientificName full scientific name lower level taxonomic rank can determined. scientificNameRank taxonomic rank scientificName. scientificNameAuthorship authorship information scientificName. .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . df data.frame tibble column appended .","code":""},{"path":"https://corella.ala.org.au/reference/use_scientific_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add scientific name and authorship to a tibble — use_scientific_name","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_scientific_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add scientific name and authorship to a tibble — use_scientific_name","text":"Examples scientificName values (specify rank parentheses, users include information): Coleoptera (order) Vespertilionidae (family) Manis (genus) Ctenomys sociabilis (genus + specificEpithet) Ambystoma tigrinum diaboli (genus + specificEpithet + infraspecificEpithet) Examples scientificNameRank: order genus subspecies infraspecies Examples scientificNameAuthorship: (Györfi, 1952) R. . Graham (Martinovský) Tzvelev","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/use_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Add spatial fields to a tibble using sf POINT coordinates — use_sf","title":"Add spatial fields to a tibble using sf POINT coordinates — use_sf","text":"function helps format standard location fields tibble. differs use_coordinates() accepting sf geometry columns class POINT coordinates (rather numeric lat/lon coordinates). advantage using sf geometry Coordinate Reference System (CRS) automatically formatted required geodeticDatum column.","code":""},{"path":"https://corella.ala.org.au/reference/use_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add spatial fields to a tibble using sf POINT coordinates — use_sf","text":"","code":"use_sf(.df, geometry = NULL, .keep = \"unused\")"},{"path":"https://corella.ala.org.au/reference/use_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add spatial fields to a tibble using sf POINT coordinates — use_sf","text":".df data.frame tibble column appended . geometry latitude/longitude coordinates decimal degrees sf POINT class .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate .","code":""},{"path":"https://corella.ala.org.au/reference/use_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add spatial fields to a tibble using sf POINT coordinates — use_sf","text":"tibble requested fields added.","code":""},{"path":[]},{"path":"https://corella.ala.org.au/reference/use_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Add taxonomic information to a tibble — use_taxonomy","title":"Add taxonomic information to a tibble — use_taxonomy","text":"Format fields contain taxonomic name information kingdom species, well common/vernacular name, tibble.","code":""},{"path":"https://corella.ala.org.au/reference/use_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add taxonomic information to a tibble — use_taxonomy","text":"","code":"use_taxonomy(   .df,   kingdom = NULL,   phylum = NULL,   class = NULL,   order = NULL,   family = NULL,   genus = NULL,   specificEpithet = NULL,   vernacularName = NULL,   .keep = \"unused\" )"},{"path":"https://corella.ala.org.au/reference/use_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add taxonomic information to a tibble — use_taxonomy","text":"kingdom kingdom name identified taxon. phylum phylum name identified taxon. class class name identified taxon. order order name identified taxon. family family name identified taxon. genus genus name identified taxon. specificEpithet name first species species epithet scientificName. See documentation vernacularName common vernacular name identified taxon. .keep Control columns .data retained output. Note unlike dplyr::mutate, defaults \"\" defaults \"unused\"; .e. keeps Darwin Core fields, fields used generate . df data.frame tibble column appended .","code":""},{"path":"https://corella.ala.org.au/reference/use_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add taxonomic information to a tibble — use_taxonomy","text":"tibble requested fields added.","code":""},{"path":"https://corella.ala.org.au/reference/use_taxonomy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add taxonomic information to a tibble — use_taxonomy","text":"practice different using mutate(), gives informative errors, serves useful lookup taxonomic names Darwin Core Standard. Examples specificEphithet: scientificName Abies concolor, specificEpithet concolor. scientificName Semisulcospira gottschei, specificEpithet gottschei.","code":""},{"path":[]}]
